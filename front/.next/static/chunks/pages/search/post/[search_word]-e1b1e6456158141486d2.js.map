{"version":3,"sources":["webpack://_N_E/../../../next-server/lib/amp.ts","webpack://_N_E/../../../next-server/lib/head.tsx","webpack://_N_E/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://_N_E/./pages/search/post/[search_word].js","webpack://_N_E/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://_N_E/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?e6a4","webpack://_N_E/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://_N_E/../../../next-server/lib/side-effect.tsx","webpack://_N_E/./components/style/PostFormStyle.js","webpack://_N_E/./components/PostForm.js","webpack://_N_E/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://_N_E/../../../next-server/lib/amp-context.ts"],"names":["isInAmpMode","React","AmpStateContext","ampFirst","hybrid","hasQuery","defaultHead","inAmpMode","head","charSet","name","content","onlyReactElement","child","list","fragmentChild","fragmentList","METATYPES","reduceComponents","headElements","headElementChildren","headElement","props","keys","tags","metaTypes","metaCategories","h","isUnique","key","i","len","metatype","category","categories","unique","c","Head","ampState","useContext","headManager","HeadManagerContext","reduceComponentsToState","module","exports","TypeError","SearchPost","useSelector","state","user","me","post","mainPosts","searchPostsDone","searchPostsLoading","hasMorePosts","router","useRouter","dispatch","useDispatch","search_word","query","console","log","useEffect","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","SEARCH_POSTS_REQUEST","data","addEventListener","removeEventListener","map","iter","Symbol","iterator","Object","Array","from","arrayLikeToArray","arr","isArray","__NEXT_P","push","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","constructor","_hasHeadManager","emitChange","componentDidMount","this","componentDidUpdate","componentWillUnmount","render","Component","TweetForm","styled","form","TweetTextArea","textarea","PostForm","useInput","text","onChangeText","setText","imageInput","useRef","addPostLoading","addPostDone","imagePaths","onSubmit","useCallback","e","preventDefault","trim","alert","formData","FormData","forEach","p","append","ADD_POST_REQUEST","notification","open","message","description","onClickImageUpload","current","click","onChangeImages","target","files","imageFormData","call","f","UPLOAD_IMAGES_REQUEST","onRemoveImage","index","REMOVE_IMAGE","rows","value","onChange","maxLength","placeholder","multiple","hidden","ref","onClick","style","float","htmlType","loading","v","display","src","width","alt","obj","defineProperty","enumerable","configurable","writable"],"mappings":"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","file":"static/chunks/pages/search/post/[search_word]-e1b1e6456158141486d2.js","sourcesContent":["import React from 'react'\nimport { AmpStateContext } from './amp-context'\n\nexport function isInAmpMode({\n  ampFirst = false,\n  hybrid = false,\n  hasQuery = false,\n} = {}): boolean {\n  return ampFirst || (hybrid && hasQuery)\n}\n\nexport function useAmp(): boolean {\n  // Don't assign the context value to a variable to save bytes\n  return isInAmpMode(React.useContext(AmpStateContext))\n}\n","import React, { useContext } from 'react'\nimport Effect from './side-effect'\nimport { AmpStateContext } from './amp-context'\nimport { HeadManagerContext } from './head-manager-context'\nimport { isInAmpMode } from './amp'\n\ntype WithInAmpMode = {\n  inAmpMode?: boolean\n}\n\nexport function defaultHead(inAmpMode = false): JSX.Element[] {\n  const head = [<meta charSet=\"utf-8\" />]\n  if (!inAmpMode) {\n    head.push(<meta name=\"viewport\" content=\"width=device-width\" />)\n  }\n  return head\n}\n\nfunction onlyReactElement(\n  list: Array<React.ReactElement<any>>,\n  child: React.ReactChild\n): Array<React.ReactElement<any>> {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list\n  }\n  // Adds support for React.Fragment\n  if (child.type === React.Fragment) {\n    return list.concat(\n      React.Children.toArray(child.props.children).reduce(\n        (\n          fragmentList: Array<React.ReactElement<any>>,\n          fragmentChild: React.ReactChild\n        ): Array<React.ReactElement<any>> => {\n          if (\n            typeof fragmentChild === 'string' ||\n            typeof fragmentChild === 'number'\n          ) {\n            return fragmentList\n          }\n          return fragmentList.concat(fragmentChild)\n        },\n        []\n      )\n    )\n  }\n  return list.concat(child)\n}\n\nconst METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp']\n\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\nfunction unique() {\n  const keys = new Set()\n  const tags = new Set()\n  const metaTypes = new Set()\n  const metaCategories: { [metatype: string]: Set<string> } = {}\n\n  return (h: React.ReactElement<any>) => {\n    let isUnique = true\n\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      const key = h.key.slice(h.key.indexOf('$') + 1)\n      if (keys.has(key)) {\n        isUnique = false\n      } else {\n        keys.add(key)\n      }\n    }\n\n    // eslint-disable-next-line default-case\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          isUnique = false\n        } else {\n          tags.add(h.type)\n        }\n        break\n      case 'meta':\n        for (let i = 0, len = METATYPES.length; i < len; i++) {\n          const metatype = METATYPES[i]\n          if (!h.props.hasOwnProperty(metatype)) continue\n\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              isUnique = false\n            } else {\n              metaTypes.add(metatype)\n            }\n          } else {\n            const category = h.props[metatype]\n            const categories = metaCategories[metatype] || new Set()\n            if (categories.has(category)) {\n              isUnique = false\n            } else {\n              categories.add(category)\n              metaCategories[metatype] = categories\n            }\n          }\n        }\n        break\n    }\n\n    return isUnique\n  }\n}\n\n/**\n *\n * @param headElements List of multiple <Head> instances\n */\nfunction reduceComponents(\n  headElements: Array<React.ReactElement<any>>,\n  props: WithInAmpMode\n) {\n  return headElements\n    .reduce(\n      (list: React.ReactChild[], headElement: React.ReactElement<any>) => {\n        const headElementChildren = React.Children.toArray(\n          headElement.props.children\n        )\n        return list.concat(headElementChildren)\n      },\n      []\n    )\n    .reduce(onlyReactElement, [])\n    .reverse()\n    .concat(defaultHead(props.inAmpMode))\n    .filter(unique())\n    .reverse()\n    .map((c: React.ReactElement<any>, i: number) => {\n      const key = c.key || i\n      if (process.env.__NEXT_OPTIMIZE_FONTS && !props.inAmpMode) {\n        if (\n          c.type === 'link' &&\n          c.props['href'] &&\n          // TODO(prateekbh@): Replace this with const from `constants` when the tree shaking works.\n          ['https://fonts.googleapis.com/css'].some((url) =>\n            c.props['href'].startsWith(url)\n          )\n        ) {\n          const newProps = { ...(c.props || {}) }\n          newProps['data-href'] = newProps['href']\n          newProps['href'] = undefined\n          return React.cloneElement(c, newProps)\n        }\n      }\n      return React.cloneElement(c, { key })\n    })\n}\n\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */\nfunction Head({ children }: { children: React.ReactNode }) {\n  const ampState = useContext(AmpStateContext)\n  const headManager = useContext(HeadManagerContext)\n  return (\n    <Effect\n      reduceComponentsToState={reduceComponents}\n      headManager={headManager}\n      inAmpMode={isInAmpMode(ampState)}\n    >\n      {children}\n    </Effect>\n  )\n}\n\n// TODO: Remove in the next major release\nHead.rewind = () => {}\n\nexport default Head\n","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","import React, { useEffect, useCallback } from \"react\";\r\nimport AppLayout from \"../../../components/AppLayout\";\r\nimport Head from \"next/head\";\r\nimport PostForm from \"../../../components/PostForm\";\r\nimport PostCard from \"../../../components/PostCard\";\r\nimport { SEARCH_POSTS_REQUEST } from '../../../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../../../reducers/user';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport wrapper from '../../../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport { Button } from \"antd\";\r\nimport { useRouter } from 'next/router';\r\n\r\n\r\nconst SearchPost = () => {\r\n    const { me } = useSelector((state) => state.user);\r\n    const { mainPosts, searchPostsDone, searchPostsLoading, hasMorePosts } = useSelector((state) => state.post);\r\n    const router = useRouter();\r\n    const dispatch = useDispatch();\r\n    const { search_word } = router.query;\r\n    console.log(\"search_word : \" + search_word);\r\n    console.log(\"search_word : \" + searchPostsDone);\r\n\r\n    useEffect(() => {\r\n        function onScroll() {\r\n            if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 300) {\r\n\r\n                if (hasMorePosts && !searchPostsLoading) {\r\n                    console.log(\"화면이 바닥에 도달 + 포스팅 추가!!\");\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: SEARCH_POSTS_REQUEST,\r\n                        data: {\r\n                            search_word: search_word,\r\n                            lastId: lastId // 그냥 lastId만 써도 된다.\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        }\r\n    }, [mainPosts, hasMorePosts, searchPostsLoading]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            <Head>\r\n                <title>Home</title>\r\n            </Head>\r\n            <h4>search world : {search_word}</h4>\r\n            {mainPosts.map((c) => {\r\n                return (\r\n                    <PostCard key={c.id} post={c} />\r\n                );\r\n            })}\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n\r\n    console.log(context.req.headers);\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    console.log(\"context.params.search_word : \", context.params.search_word);\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n\r\n    context.store.dispatch({\r\n        type: SEARCH_POSTS_REQUEST,\r\n        data: {\r\n            search_word: context.params.search_word,\r\n        }\r\n    });\r\n\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default SearchPost;\r\n","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/search/post/[search_word]\",\n      function () {\n        return require(\"private-next-pages/search/post/[search_word].js\");\n      }\n    ]);\n  ","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","import React, { Component } from 'react'\n\nconst isServer = typeof window === 'undefined'\n\ntype State = JSX.Element[] | undefined\n\ntype SideEffectProps = {\n  reduceComponentsToState: <T>(\n    components: Array<React.ReactElement<any>>,\n    props: T\n  ) => State\n  handleStateChange?: (state: State) => void\n  headManager: any\n  inAmpMode?: boolean\n}\n\nexport default class extends Component<SideEffectProps> {\n  private _hasHeadManager: boolean\n\n  emitChange = (): void => {\n    if (this._hasHeadManager) {\n      this.props.headManager.updateHead(\n        this.props.reduceComponentsToState(\n          [...this.props.headManager.mountedInstances],\n          this.props\n        )\n      )\n    }\n  }\n\n  constructor(props: any) {\n    super(props)\n    this._hasHeadManager =\n      this.props.headManager && this.props.headManager.mountedInstances\n\n    if (isServer && this._hasHeadManager) {\n      this.props.headManager.mountedInstances.add(this)\n      this.emitChange()\n    }\n  }\n  componentDidMount() {\n    if (this._hasHeadManager) {\n      this.props.headManager.mountedInstances.add(this)\n    }\n    this.emitChange()\n  }\n  componentDidUpdate() {\n    this.emitChange()\n  }\n  componentWillUnmount() {\n    if (this._hasHeadManager) {\n      this.props.headManager.mountedInstances.delete(this)\n    }\n    this.emitChange()\n  }\n\n  render() {\n    return null\n  }\n}\n","import styled from \"styled-components\";\r\n\r\n\r\nexport const TweetForm = styled.form`\r\n  margin-top: 5px;\r\n  margin-bottom: 40px;\r\n`\r\n\r\nexport const TweetTextArea = styled.textarea`\r\n  width: 100%;\r\n  height: 125px;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  border: solid 2px #1E90FF;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n  resize: both;\r\n`\r\n\r\n// css\r\nexport const TweetButton = styled.button`\r\n  /* Adapt the colors based on primary prop */\r\n  margin-top: 1px;\r\n  margin-left: 1px;\r\n  background: ${props => props.white ? \"white\" : \"white\"};\r\n  color: ${props => props.primary ? \"palevioletred\" : \"palevioletred\"};\r\n  font-size: 1em;\r\n  padding: 0.25em 1em;\r\n  border: 2px solid skyblue;\r\n  border-radius: 3px;\r\n  display: flex; \r\n  justify-content: space-between;\r\n  float:${props => props.right ? \"right\" : \"left\"};\r\n`;","import React, { useCallback, useEffect, useRef } from 'react'\r\nimport useInput from '../hooks/useInput';\r\nimport { TweetForm, TweetButton, TweetTextArea } from \"./style/PostFormStyle.js\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Button, notification } from \"antd\";\r\n// import { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\n\r\n\r\nfunction PostForm() {\r\n    const dispatch = useDispatch();\r\n    const [text, onChangeText, setText] = useInput(\"\");\r\n    const imageInput = useRef();\r\n    const { addPostLoading, addPostDone, imagePaths } = useSelector((state) => state.post);\r\n\r\n    useEffect(() => {\r\n        if (addPostDone) {\r\n            setText('');\r\n        }\r\n    }, [addPostDone]);\r\n\r\n    const onSubmit = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!text || !text.trim()) {\r\n            return alert('게시글을 작성하세요.');\r\n        }\r\n\r\n        // 폼데이터 객체에 이미지와 텍스트 정보를 설정 한뒤 \r\n        const formData = new FormData();\r\n        imagePaths.forEach((p) => {\r\n            formData.append('image', p);\r\n        });\r\n        formData.append('content', text);\r\n\r\n        // 액션 data로 설정\r\n        dispatch({\r\n            type: ADD_POST_REQUEST,\r\n            data: formData,\r\n        });\r\n\r\n        notification.open({\r\n            message: '알림',\r\n            description: \"posting 성공!\"\r\n        })\r\n\r\n    }, [text, imagePaths, addPostDone]);\r\n\r\n\r\n    const onClickImageUpload = useCallback(() => {\r\n        imageInput.current.click();\r\n    }, [imageInput.current]);\r\n\r\n    const onChangeImages = useCallback((e) => {\r\n        console.log('images : ', e.target.files);\r\n\r\n        const imageFormData = new FormData();\r\n        [].forEach.call(e.target.files, (f) => {\r\n            imageFormData.append('image', f);\r\n        });\r\n\r\n        console.log(\"imageFormData : \", imageFormData);\r\n\r\n        dispatch({\r\n            type: UPLOAD_IMAGES_REQUEST,\r\n            data: imageFormData,\r\n        });\r\n\r\n    });\r\n\r\n    const onRemoveImage = useCallback((index) => () => {\r\n        dispatch({\r\n            type: REMOVE_IMAGE,\r\n            data: index,\r\n        });\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <TweetForm onSubmit={onSubmit}>\r\n                <TweetTextArea\r\n                    rows={4}\r\n                    value={text}\r\n                    onChange={onChangeText}\r\n                    maxLength={140}\r\n                    placeholder=\"어떤 신기한 일이 있었나요?\"\r\n                />\r\n                <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n                <Button type=\"submit\" style={{ float: 'right' }} htmlType=\"submit\" loading={addPostLoading}>Tweet</Button>\r\n\r\n            </TweetForm>\r\n            {imagePaths.map((v, i) => (\r\n                <div key={v} style={{ display: 'inline-block' }}>\r\n                    <img src={`http://127.0.0.1:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n                    <div>\r\n                        <Button onClick={onRemoveImage(i)}>제거</Button>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default PostForm\r\n","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","import React from 'react'\n\nexport const AmpStateContext: React.Context<any> = React.createContext({})\n\nif (process.env.NODE_ENV !== 'production') {\n  AmpStateContext.displayName = 'AmpStateContext'\n}\n"],"sourceRoot":""}