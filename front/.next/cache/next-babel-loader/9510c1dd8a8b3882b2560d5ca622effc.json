{"ast":null,"code":"import { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios'; // import shortId from 'shortid';\n\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, DELETE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  // console.log(\"data for posting at saga : \", data);\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"result for posting : \", result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  // return axios.delete('/api/post', data);\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(removePostAPI, action.data);\n    console.log(\"result from backend, postId 확인 하기 : \", result.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      // data: action.data,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      // data: action.data,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  console.log(\"data from saga for add comment : \", data);\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  console.log(\"addComent action : \", action.data);\n\n  try {\n    // yield delay(1000);\n    const result = yield call(addCommentAPI, action.data);\n    console.log(\"result(response from backend from insert comment): \", result);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(\"댓글 에러 : \", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  // return axios.get('/posts', data);\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    const result = yield call(loadPostsAPI, action.lastId);\n    console.log(\"result for loadPostsAPI : \", result);\n    console.log(\"result for loadPostsAPI : \", result.data.length);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      // data: generateDummyPost(10),\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  console.log(\"data 확인 from saga : \", data);\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction deleteCommentAPI(data) {\n  console.log(\"data 확인 from saga : \", data);\n  return axios.delete(`post/comment/${data.PostId}/${data.CommentId}`);\n}\n\nfunction* deleteComment(action) {\n  try {\n    const result = yield call(deleteCommentAPI, action.data);\n    console.log(\"삭제에 대한 응답 : \", result.data);\n    yield put({\n      type: DELETE_COMMENT_SUCCESS,\n      // 라우터에서 댓글 삭제한뒤 PostId와 CommentId 리턴 \n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: DELETE_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchDeleteComment() {\n  yield takeLatest(DELETE_COMMENT_REQUEST, deleteComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts), fork(watchUploadImages), fork(watchDeleteComment), fork(watchLikePost), fork(watchUnlikePost)]);\n}","map":{"version":3,"sources":["C:/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","throttle","call","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","result","console","log","type","id","err","error","response","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","loadPostsAPI","lastId","get","loadPosts","length","uploadImagesAPI","uploadImages","deleteCommentAPI","PostId","CommentId","deleteComment","watchLoadPosts","watchRemovePost","watchAddPost","watchAddComment","watchUploadImages","watchDeleteComment","watchLikePost","likePost","watchUnlikePost","unlikePost","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n// import shortId from 'shortid';\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n\r\n    DELETE_COMMENT_REQUEST,\r\n    DELETE_COMMENT_SUCCESS,\r\n    DELETE_COMMENT_FAILURE,\r\n\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    // console.log(\"data for posting at saga : \", data);\r\n    return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log(\"result for posting : \", result);\r\n\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    // return axios.delete('/api/post', data);\r\n    return axios.delete(`/post/${data}`);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(removePostAPI, action.data);\r\n        console.log(\"result from backend, postId 확인 하기 : \", result.data);\r\n\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            // data: action.data,\r\n            data: result.data,\r\n        });\r\n\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            // data: action.data,\r\n            data: result.data,\r\n        });\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    console.log(\"data from saga for add comment : \", data);\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    console.log(\"addComent action : \", action.data);\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log(\"result(response from backend from insert comment): \", result);\r\n\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(\"댓글 에러 : \", err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    // return axios.get('/posts', data);\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n\r\n}\r\nfunction* loadPosts(action) {\r\n    try {\r\n        // const result = yield call(loadPostsAPI, action.data);\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        console.log(\"result for loadPostsAPI : \", result);\r\n        console.log(\"result for loadPostsAPI : \", result.data.length);\r\n\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            // data: generateDummyPost(10),\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    console.log(\"data 확인 from saga : \", data);\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction deleteCommentAPI(data) {\r\n    console.log(\"data 확인 from saga : \", data);\r\n    return axios.delete(`post/comment/${data.PostId}/${data.CommentId}`);\r\n}\r\n\r\nfunction* deleteComment(action) {\r\n    try {\r\n        const result = yield call(deleteCommentAPI, action.data);\r\n        console.log(\"삭제에 대한 응답 : \", result.data);\r\n\r\n        yield put({\r\n            type: DELETE_COMMENT_SUCCESS,\r\n            // 라우터에서 댓글 삭제한뒤 PostId와 CommentId 리턴 \r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: DELETE_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchDeleteComment() {\r\n    yield takeLatest(DELETE_COMMENT_REQUEST, deleteComment);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPosts),\r\n        fork(watchUploadImages),\r\n        fork(watchDeleteComment),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}