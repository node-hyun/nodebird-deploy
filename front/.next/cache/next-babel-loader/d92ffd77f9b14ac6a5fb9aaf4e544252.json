{"ast":null,"code":"var _jsxFileName = \"C:\\\\nodebird\\\\front\\\\pages\\\\search\\\\post\\\\[search_word].js\";\nimport React, { useEffect, useCallback } from \"react\";\nimport AppLayout from \"../../../components/AppLayout\";\nimport Head from \"next/head\";\nimport PostForm from \"../../../components/PostForm\";\nimport PostCard from \"../../../components/PostCard\";\nimport { SEARCH_POSTS_REQUEST } from '../../../reducers/post';\nimport { LOAD_USER_REQUEST } from '../../../reducers/user';\nimport { useSelector, useDispatch } from 'react-redux';\nimport wrapper from '../../../store/configureStore';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport { Button } from \"antd\";\nimport { useRouter } from 'next/router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchPost = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    searchPostsDone,\n    searchPostsLoading,\n    hasMorePosts\n  } = useSelector(state => state.post);\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const {\n    search_word\n  } = router.query;\n  console.log(\"search_word : \" + search_word);\n  console.log(\"search_word : \" + searchPostsDone);\n  useEffect(() => {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !searchPostsLoading) {\n          var _mainPosts;\n\n          console.log(\"화면이 바닥에 도달 + 포스팅 추가!!\");\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: SEARCH_POSTS_REQUEST,\n            // data: mainPosts[mainPosts.length - 1].id,\n            lastId: lastId // 그냥 lastId만 써도 된다.\n\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, searchPostsLoading]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"search world : \", search_word]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), mainPosts.map(c => {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: c\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(context.req.headers);\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  console.log(\"context.params.search_world : \", context.params.search_world);\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST\n  });\n  context.store.dispatch({\n    type: SEARCH_POSTS_REQUEST,\n    data: context.params.search_word\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default SearchPost;","map":{"version":3,"sources":["C:/nodebird/front/pages/search/post/[search_word].js"],"names":["React","useEffect","useCallback","AppLayout","Head","PostForm","PostCard","SEARCH_POSTS_REQUEST","LOAD_USER_REQUEST","useSelector","useDispatch","wrapper","END","axios","Button","useRouter","SearchPost","me","state","user","mainPosts","searchPostsDone","searchPostsLoading","hasMorePosts","post","router","dispatch","search_word","query","console","log","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map","c","getServerSideProps","context","req","headers","cookie","defaults","Cookie","params","search_world","store","data","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback } from \"react\";\r\nimport AppLayout from \"../../../components/AppLayout\";\r\nimport Head from \"next/head\";\r\nimport PostForm from \"../../../components/PostForm\";\r\nimport PostCard from \"../../../components/PostCard\";\r\nimport { SEARCH_POSTS_REQUEST } from '../../../reducers/post';\r\nimport { LOAD_USER_REQUEST } from '../../../reducers/user';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport wrapper from '../../../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport { Button } from \"antd\";\r\nimport { useRouter } from 'next/router';\r\n\r\n\r\nconst SearchPost = () => {\r\n    const { me } = useSelector((state) => state.user);\r\n    const { mainPosts, searchPostsDone, searchPostsLoading, hasMorePosts } = useSelector((state) => state.post);\r\n    const router = useRouter();\r\n    const dispatch = useDispatch();\r\n    const { search_word } = router.query;\r\n    console.log(\"search_word : \" + search_word);\r\n    console.log(\"search_word : \" + searchPostsDone);\r\n\r\n\r\n    useEffect(() => {\r\n        function onScroll() {\r\n            if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 300) {\r\n\r\n                if (hasMorePosts && !searchPostsLoading) {\r\n                    console.log(\"화면이 바닥에 도달 + 포스팅 추가!!\");\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: SEARCH_POSTS_REQUEST,\r\n                        // data: mainPosts[mainPosts.length - 1].id,\r\n                        lastId: lastId // 그냥 lastId만 써도 된다.\r\n                    });\r\n                }\r\n\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        }\r\n    }, [mainPosts, hasMorePosts, searchPostsLoading]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            <Head>\r\n                <title>Home</title>\r\n            </Head>\r\n            <h4>search world : {search_word}</h4>\r\n            {mainPosts.map((c) => {\r\n                return (\r\n                    <PostCard key={c.id} post={c} />\r\n                );\r\n            })}\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n\r\n    console.log(context.req.headers);\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    console.log(\"context.params.search_world : \", context.params.search_world);\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_USER_REQUEST,\r\n    });\r\n\r\n    context.store.dispatch({\r\n        type: SEARCH_POSTS_REQUEST,\r\n        data: context.params.search_word\r\n    });\r\n\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default SearchPost;\r\n\r\n"]},"metadata":{},"sourceType":"module"}