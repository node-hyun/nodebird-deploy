{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(searchPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(deleteComment),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchDeleteComment),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchSearchPosts),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios'; // import shortId from 'shortid';\n\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, DELETE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, SEARCH_POSTS_REQUEST, SEARCH_POSTS_SUCCESS, SEARCH_POSTS_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; // add your api 1122\n\nfunction SearchPostsAPI(searchWord) {\n  console.log('searh word at SearchPostsAPI', searchWord || \" \");\n  return axios.get(\"/post/search/\".concat(searchWord, \"/\"));\n}\n\n_c = SearchPostsAPI;\n\nfunction searchPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function searchPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(SearchPostsAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(\"result for SearchPostsAPI : \", result);\n          console.log(\"result for SearchPostsAPI : \", result.data.length);\n          _context.next = 8;\n          return put({\n            type: SEARCH_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 15;\n          return put({\n            type: SEARCH_POSTS_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction retweetAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction addPostAPI(data) {\n  // console.log(\"data for posting at saga : \", data);\n  return axios.post('/post', data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          console.log(\"result for posting : \", result);\n          _context3.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context3.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 9:\n          _context3.next = 16;\n          break;\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 16;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 11]]);\n}\n\nfunction removePostAPI(data) {\n  // return axios.delete('/api/post', data);\n  return axios[\"delete\"](\"/post/\".concat(data));\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          console.log(\"result from backend, postId 확인 하기 : \", result.data);\n          _context4.next = 7;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            // data: action.data,\n            data: result.data\n          });\n\n        case 7:\n          _context4.next = 9;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            // data: action.data,\n            data: result.data\n          });\n\n        case 9:\n          _context4.next = 16;\n          break;\n\n        case 11:\n          _context4.prev = 11;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 16;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 16:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 11]]);\n}\n\nfunction addCommentAPI(data) {\n  console.log(\"data from saga for add comment : \", data);\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          console.log(\"addComent action : \", action.data);\n          _context5.prev = 1;\n          _context5.next = 4;\n          return call(addCommentAPI, action.data);\n\n        case 4:\n          result = _context5.sent;\n          console.log(\"result(response from backend from insert comment): \", result);\n          _context5.next = 8;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context5.next = 15;\n          break;\n\n        case 10:\n          _context5.prev = 10;\n          _context5.t0 = _context5[\"catch\"](1);\n          console.log(\"댓글 에러 : \", _context5.t0);\n          _context5.next = 15;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context5.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[1, 10]]);\n}\n\nfunction loadPostsAPI(lastId) {\n  // return axios.get('/posts', data);\n  return axios.get(\"/posts?lastId=\".concat(lastId || 0));\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(loadPostsAPI, action.lastId);\n\n        case 3:\n          result = _context6.sent;\n          console.log(\"result for loadPostsAPI : \", result);\n          console.log(\"result for loadPostsAPI : \", result.data.length);\n          _context6.next = 8;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            // data: generateDummyPost(10),\n            data: result.data\n          });\n\n        case 8:\n          _context6.next = 15;\n          break;\n\n        case 10:\n          _context6.prev = 10;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 15;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context6.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 10]]);\n}\n\nfunction uploadImagesAPI(data) {\n  console.log(\"data 확인 from saga : \", data);\n  return axios.post('/post/images', data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction deleteCommentAPI(data) {\n  console.log(\"data 확인 from saga : \", data);\n  return axios[\"delete\"](\"post/comment/\".concat(data.PostId, \"/\").concat(data.CommentId));\n}\n\nfunction deleteComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function deleteComment$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(deleteCommentAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          console.log(\"삭제에 대한 응답 : \", result.data);\n          _context8.next = 7;\n          return put({\n            type: DELETE_COMMENT_SUCCESS,\n            // 라우터에서 댓글 삭제한뒤 PostId와 CommentId 리턴 \n            data: result.data\n          });\n\n        case 7:\n          _context8.next = 14;\n          break;\n\n        case 9:\n          _context8.prev = 9;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 14;\n          return put({\n            type: DELETE_COMMENT_FAILURE,\n            error: _context8.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 9]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context9.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          _context10.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context10.sent;\n          _context10.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context10.next = 13;\n          break;\n\n        case 8:\n          _context10.prev = 8;\n          _context10.t0 = _context10[\"catch\"](0);\n          console.error(_context10.t0);\n          _context10.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context10.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 8]]);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchDeleteComment() {\n  return _regeneratorRuntime.wrap(function watchDeleteComment$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(DELETE_COMMENT_REQUEST, deleteComment);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}\n\nfunction watchSearchPosts() {\n  return _regeneratorRuntime.wrap(function watchSearchPosts$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts), fork(watchUploadImages), fork(watchDeleteComment), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchSearchPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchPostsAPI\");","map":{"version":3,"sources":["C:/nodebird/front/sagas/post.js"],"names":["searchPosts","retweet","addPost","removePost","addComment","loadPosts","uploadImages","deleteComment","likePost","unlikePost","watchLoadPosts","watchRemovePost","watchAddPost","watchAddComment","watchUploadImages","watchDeleteComment","watchLikePost","watchUnlikePost","watchRetweet","watchSearchPosts","postSaga","all","delay","fork","put","takeLatest","throttle","call","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","SEARCH_POSTS_REQUEST","SEARCH_POSTS_SUCCESS","SEARCH_POSTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","SearchPostsAPI","searchWord","console","log","get","action","data","result","length","type","error","response","retweetAPI","post","addPostAPI","id","removePostAPI","addCommentAPI","postId","loadPostsAPI","lastId","uploadImagesAPI","deleteCommentAPI","PostId","CommentId","likePostAPI","patch","unlikePostAPI"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n// import shortId from 'shortid';\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n\r\n    DELETE_COMMENT_REQUEST,\r\n    DELETE_COMMENT_SUCCESS,\r\n    DELETE_COMMENT_FAILURE,\r\n\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    RETWEET_FAILURE,\r\n\r\n    SEARCH_POSTS_REQUEST,\r\n    SEARCH_POSTS_SUCCESS,\r\n    SEARCH_POSTS_FAILURE,\r\n\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n// add your api 1122\r\n\r\nfunction SearchPostsAPI(searchWord) {\r\n    console.log('searh word at SearchPostsAPI', searchWord || \" \");\r\n    return axios.get(`/post/search/${searchWord}/`);\r\n\r\n}\r\n\r\nfunction* searchPosts(action) {\r\n    try {\r\n        // const result = yield call(SearchPostsAPI, action.data);\r\n        const result = yield call(SearchPostsAPI, action.data);\r\n        console.log(\"result for SearchPostsAPI : \", result);\r\n        console.log(\"result for SearchPostsAPI : \", result.data.length);\r\n\r\n        yield put({\r\n            type: SEARCH_POSTS_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: SEARCH_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    // console.log(\"data for posting at saga : \", data);\r\n    return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log(\"result for posting : \", result);\r\n\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    // return axios.delete('/api/post', data);\r\n    return axios.delete(`/post/${data}`);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(removePostAPI, action.data);\r\n        console.log(\"result from backend, postId 확인 하기 : \", result.data);\r\n\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            // data: action.data,\r\n            data: result.data,\r\n        });\r\n\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            // data: action.data,\r\n            data: result.data,\r\n        });\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    console.log(\"data from saga for add comment : \", data);\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    console.log(\"addComent action : \", action.data);\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log(\"result(response from backend from insert comment): \", result);\r\n\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(\"댓글 에러 : \", err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    // return axios.get('/posts', data);\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n\r\n}\r\nfunction* loadPosts(action) {\r\n    try {\r\n        // const result = yield call(loadPostsAPI, action.data);\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        console.log(\"result for loadPostsAPI : \", result);\r\n        console.log(\"result for loadPostsAPI : \", result.data.length);\r\n\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            // data: generateDummyPost(10),\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    console.log(\"data 확인 from saga : \", data);\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction deleteCommentAPI(data) {\r\n    console.log(\"data 확인 from saga : \", data);\r\n    return axios.delete(`post/comment/${data.PostId}/${data.CommentId}`);\r\n}\r\n\r\nfunction* deleteComment(action) {\r\n    try {\r\n        const result = yield call(deleteCommentAPI, action.data);\r\n        console.log(\"삭제에 대한 응답 : \", result.data);\r\n\r\n        yield put({\r\n            type: DELETE_COMMENT_SUCCESS,\r\n            // 라우터에서 댓글 삭제한뒤 PostId와 CommentId 리턴 \r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: DELETE_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchDeleteComment() {\r\n    yield takeLatest(DELETE_COMMENT_REQUEST, deleteComment);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchSearchPosts() {\r\n    yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPosts),\r\n        fork(watchUploadImages),\r\n        fork(watchDeleteComment),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n        fork(watchSearchPosts),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}