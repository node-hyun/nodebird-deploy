{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\nodebird-deploy\\\\front\\\\components\\\\PostForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport useInput from '../hooks/useInput';\nimport { TweetForm, TweetButton, TweetTextArea } from \"./style/PostFormStyle.js\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, notification } from \"antd\"; // import { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\n\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PostForm() {\n  _s();\n\n  var _this = this;\n\n  var dispatch = useDispatch();\n\n  var _useInput = useInput(\"\"),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      text = _useInput2[0],\n      onChangeText = _useInput2[1],\n      setText = _useInput2[2];\n\n  var imageInput = useRef();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addPostLoading = _useSelector.addPostLoading,\n      addPostDone = _useSelector.addPostDone,\n      imagePaths = _useSelector.imagePaths;\n\n  useEffect(function () {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  var onSubmit = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    } // 폼데이터 객체에 이미지와 텍스트 정보를 설정 한뒤 \n\n\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      formData.append('image', p);\n    });\n    formData.append('content', text); // 액션 data로 설정\n\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n    notification.open({\n      message: '알림',\n      description: \"posting 성공!\"\n    });\n  }, [text, imagePaths, addPostDone]);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    console.log('images : ', e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    console.log(\"imageFormData : \", imageFormData);\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  });\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: index\n      });\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TweetForm, {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TweetTextArea, {\n        rows: 4,\n        value: text,\n        onChange: onChangeText,\n        maxLength: 140,\n        placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"image\",\n        multiple: true,\n        hidden: true,\n        ref: imageInput,\n        onChange: onChangeImages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClickImageUpload,\n        children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        style: {\n          \"float\": 'right'\n        },\n        htmlType: \"submit\",\n        loading: addPostLoading,\n        children: \"\\uC9F9\\uC9F9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), imagePaths.map(function (v, i) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'inline-block'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: v,\n          style: {\n            width: '200px'\n          },\n          alt: v\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: onRemoveImage(i),\n            children: \"\\uC81C\\uAC70\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, _this)]\n      }, v, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, _this);\n    })]\n  }, void 0, true);\n}\n\n_s(PostForm, \"MHTslabalqQr/hAfAuIThpCfkbU=\", false, function () {\n  return [useDispatch, useInput, useSelector];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["C:/nodebird-deploy/front/components/PostForm.js"],"names":["React","useCallback","useEffect","useRef","useInput","TweetForm","TweetButton","TweetTextArea","useDispatch","useSelector","Button","notification","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","dispatch","text","onChangeText","setText","imageInput","state","post","addPostLoading","addPostDone","imagePaths","onSubmit","e","preventDefault","trim","alert","formData","FormData","forEach","p","append","type","data","open","message","description","onClickImageUpload","current","click","onChangeImages","console","log","target","files","imageFormData","call","f","onRemoveImage","index","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react'\r\nimport useInput from '../hooks/useInput';\r\nimport { TweetForm, TweetButton, TweetTextArea } from \"./style/PostFormStyle.js\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Button, notification } from \"antd\";\r\n// import { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\n\r\n\r\nfunction PostForm() {\r\n    const dispatch = useDispatch();\r\n    const [text, onChangeText, setText] = useInput(\"\");\r\n    const imageInput = useRef();\r\n    const { addPostLoading, addPostDone, imagePaths } = useSelector((state) => state.post);\r\n\r\n    useEffect(() => {\r\n        if (addPostDone) {\r\n            setText('');\r\n        }\r\n    }, [addPostDone]);\r\n\r\n    const onSubmit = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!text || !text.trim()) {\r\n            return alert('게시글을 작성하세요.');\r\n        }\r\n\r\n        // 폼데이터 객체에 이미지와 텍스트 정보를 설정 한뒤 \r\n        const formData = new FormData();\r\n        imagePaths.forEach((p) => {\r\n            formData.append('image', p);\r\n        });\r\n        formData.append('content', text);\r\n\r\n        // 액션 data로 설정\r\n        dispatch({\r\n            type: ADD_POST_REQUEST,\r\n            data: formData,\r\n        });\r\n\r\n        notification.open({\r\n            message: '알림',\r\n            description: \"posting 성공!\"\r\n        })\r\n\r\n    }, [text, imagePaths, addPostDone]);\r\n\r\n\r\n    const onClickImageUpload = useCallback(() => {\r\n        imageInput.current.click();\r\n    }, [imageInput.current]);\r\n\r\n    const onChangeImages = useCallback((e) => {\r\n        console.log('images : ', e.target.files);\r\n\r\n        const imageFormData = new FormData();\r\n        [].forEach.call(e.target.files, (f) => {\r\n            imageFormData.append('image', f);\r\n        });\r\n\r\n        console.log(\"imageFormData : \", imageFormData);\r\n\r\n        dispatch({\r\n            type: UPLOAD_IMAGES_REQUEST,\r\n            data: imageFormData,\r\n        });\r\n\r\n    });\r\n\r\n    const onRemoveImage = useCallback((index) => () => {\r\n        dispatch({\r\n            type: REMOVE_IMAGE,\r\n            data: index,\r\n        });\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <TweetForm onSubmit={onSubmit}>\r\n                <TweetTextArea\r\n                    rows={4}\r\n                    value={text}\r\n                    onChange={onChangeText}\r\n                    maxLength={140}\r\n                    placeholder=\"어떤 신기한 일이 있었나요?\"\r\n                />\r\n                <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n                <Button type=\"submit\" style={{ float: 'right' }} htmlType=\"submit\" loading={addPostLoading}>짹짹</Button>\r\n\r\n            </TweetForm>\r\n            {imagePaths.map((v, i) => (\r\n                <div key={v} style={{ display: 'inline-block' }}>\r\n                    {/* <img src={`http://127.0.0.1:3065/${v}`} style={{ width: '200px' }} alt={v} /> */}\r\n                    <img src={v} style={{ width: '200px' }} alt={v} />\r\n                    <div>\r\n                        <Button onClick={onRemoveImage(i)}>제거</Button>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default PostForm\r\n"]},"metadata":{},"sourceType":"module"}