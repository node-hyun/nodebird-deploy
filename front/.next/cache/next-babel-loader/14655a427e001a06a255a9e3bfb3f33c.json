{"ast":null,"code":"var _jsxFileName = \"C:\\\\nodebird\\\\front\\\\pages\\\\search\\\\post\\\\[search_word].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback } from \"react\";\nimport AppLayout from \"../../../components/AppLayout\";\nimport Head from \"next/head\";\nimport PostForm from \"../../../components/PostForm\";\nimport PostCard from \"../../../components/PostCard\";\nimport { SEARCH_POSTS_REQUEST } from '../../../reducers/post';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button } from \"antd\";\nimport { useRouter } from 'next/router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Home = function Home() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var router = useRouter();\n  var dispatch = useDispatch();\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostsLoading = _useSelector2.loadPostsLoading,\n      searchPostsDone = _useSelector2.searchPostsDone;\n\n  var search_word = router.query.search_word;\n  console.log(\"search_word : \", search_word); // const gotoMain = useCallback(() => {\n  //     Router.replace('/');\n  // }, [searchPostsDone]);\n\n  useEffect(function () {\n    dispatch({\n      type: SEARCH_POSTS_REQUEST,\n      data: search_word\n    });\n  }, []); // useEffect(() => {\n  //     function onScroll() {\n  //         // console.log(window.scrollY + document.documentElement.clientHeight, document.documentElement.scrollHeight);\n  //         if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 300) {\n  //             // console.log(\"화면이 바닥에 도달했습니다.\");\n  //             if (hasMorePosts && !loadPostsLoading) {\n  //                 console.log(\"화면이 바닥에 도달 + 포스팅 추가!!\");\n  //                 // mainPosts 배열의 개수 - 1이 마지막 요소의 인덱스 번호가 되므로 다음과 같이 indec 번호를 가져 온다.\n  //                 const lastId = mainPosts[mainPosts.length - 1]?.id;\n  //                 dispatch({\n  //                     type: LOAD_POSTS_REQUEST,\n  //                     // data: mainPosts[mainPosts.length - 1].id,\n  //                     lastId: lastId // 그냥 lastId만 써도 된다.\n  //                 });\n  //             }\n  //         }\n  //     }\n  //     window.addEventListener('scroll', onScroll);\n  //     return () => {\n  //         window.removeEventListener('scroll', onScroll);\n  //     }\n  // }, [mainPosts, hasMorePosts, loadPostsLoading]);\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, _this), me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 20\n    }, _this), mainPosts.map(function (c) {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: c\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Home, \"P1JGsJ/KN+5NXAYwkwAlkwirwXA=\", false, function () {\n  return [useSelector, useRouter, useDispatch, useSelector];\n});\n\n_c = Home;\nexport var __N_SSP = true;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/nodebird/front/pages/search/post/[search_word].js"],"names":["React","useEffect","useCallback","AppLayout","Head","PostForm","PostCard","SEARCH_POSTS_REQUEST","useSelector","useDispatch","Button","useRouter","Home","state","user","me","router","dispatch","post","mainPosts","hasMorePosts","loadPostsLoading","searchPostsDone","search_word","query","console","log","type","data","map","c","id"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,SAASC,oBAAT,QAAqC,wBAArC;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAIA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;;;AAGA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AAAA,qBACAJ,WAAW,CAAC,UAACK,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CADX;AAAA,MACPC,EADO,gBACPA,EADO;;AAEf,MAAMC,MAAM,GAAGL,SAAS,EAAxB;AACA,MAAMM,QAAQ,GAAGR,WAAW,EAA5B;;AAHe,sBAIwDD,WAAW,CAAC,UAACK,KAAD;AAAA,WAAWA,KAAK,CAACK,IAAjB;AAAA,GAAD,CAJnE;AAAA,MAIPC,SAJO,iBAIPA,SAJO;AAAA,MAIIC,YAJJ,iBAIIA,YAJJ;AAAA,MAIkBC,gBAJlB,iBAIkBA,gBAJlB;AAAA,MAIoCC,eAJpC,iBAIoCA,eAJpC;;AAAA,MAKPC,WALO,GAKSP,MAAM,CAACQ,KALhB,CAKPD,WALO;AAMfE,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,WAA9B,EANe,CAQf;AACA;AACA;;AAEAtB,EAAAA,SAAS,CAAC,YAAK;AACXgB,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEpB,oBADD;AAELqB,MAAAA,IAAI,EAAEL;AAFD,KAAD,CAAR;AAIH,GALQ,EAKN,EALM,CAAT,CAZe,CAmBf;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI,QAAC,SAAD;AAAA,4BACI,QAAC,IAAD;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,aADJ,EAIKR,EAAE,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,aAJX,EAKKI,SAAS,CAACU,GAAV,CAAc,UAACC,CAAD,EAAO;AAClB,0BACI,QAAC,QAAD;AAAqB,QAAA,IAAI,EAAEA;AAA3B,SAAeA,CAAC,CAACC,EAAjB;AAAA;AAAA;AAAA;AAAA,eADJ;AAGH,KAJA,CALL;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AAcH,CA1DD;;GAAMnB,I;UACaJ,W,EACAG,S,EACEF,W,EACsDD,W;;;KAJrEI,I;;AAoFN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useCallback } from \"react\";\r\nimport AppLayout from \"../../../components/AppLayout\";\r\nimport Head from \"next/head\";\r\nimport PostForm from \"../../../components/PostForm\";\r\nimport PostCard from \"../../../components/PostCard\";\r\nimport { SEARCH_POSTS_REQUEST } from '../../../reducers/post';\r\nimport { LOAD_USER_REQUEST } from '../../../reducers/user';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport wrapper from '../../../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport { Button } from \"antd\";\r\nimport { useRouter } from 'next/router';\r\n\r\n\r\nconst Home = () => {\r\n    const { me } = useSelector((state) => state.user);\r\n    const router = useRouter();\r\n    const dispatch = useDispatch();\r\n    const { mainPosts, hasMorePosts, loadPostsLoading, searchPostsDone } = useSelector((state) => state.post);\r\n    const { search_word } = router.query;\r\n    console.log(\"search_word : \", search_word);\r\n\r\n    // const gotoMain = useCallback(() => {\r\n    //     Router.replace('/');\r\n    // }, [searchPostsDone]);\r\n\r\n    useEffect(()=> {\r\n        dispatch({\r\n            type: SEARCH_POSTS_REQUEST,\r\n            data: search_word\r\n        });\r\n    }, [])\r\n\r\n    // useEffect(() => {\r\n    //     function onScroll() {\r\n    //         // console.log(window.scrollY + document.documentElement.clientHeight, document.documentElement.scrollHeight);\r\n    //         if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 300) {\r\n    //             // console.log(\"화면이 바닥에 도달했습니다.\");\r\n\r\n    //             if (hasMorePosts && !loadPostsLoading) {\r\n    //                 console.log(\"화면이 바닥에 도달 + 포스팅 추가!!\");\r\n    //                 // mainPosts 배열의 개수 - 1이 마지막 요소의 인덱스 번호가 되므로 다음과 같이 indec 번호를 가져 온다.\r\n    //                 const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n    //                 dispatch({\r\n    //                     type: LOAD_POSTS_REQUEST,\r\n    //                     // data: mainPosts[mainPosts.length - 1].id,\r\n    //                     lastId: lastId // 그냥 lastId만 써도 된다.\r\n    //                 });\r\n    //             }\r\n\r\n    //         }\r\n    //     }\r\n    //     window.addEventListener('scroll', onScroll);\r\n    //     return () => {\r\n    //         window.removeEventListener('scroll', onScroll);\r\n    //     }\r\n    // }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            <Head>\r\n                <title>Home</title>\r\n            </Head>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((c) => {\r\n                return (\r\n                    <PostCard key={c.id} post={c} />\r\n                );\r\n            })}\r\n            {/* {searchPostsDone ? <Button onCLick={gotoMain}>go to main</Button> : null} */}\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n\r\n    console.log(context.req.headers);\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    console.log(\"context.params.search_world : \", context.params.search_world);\r\n\r\n        context.store.dispatch({\r\n            type: LOAD_USER_REQUEST,\r\n        });\r\n\r\n    // context.store.dispatch({\r\n    //     type: SEARCH_POSTS_REQUEST,\r\n    //     data: context.params.search_world\r\n    // });\r\n\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;\r\n\r\n"]},"metadata":{},"sourceType":"module"}