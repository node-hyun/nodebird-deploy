{"ast":null,"code":"var _jsxFileName = \"C:\\\\nodebird\\\\front\\\\pages\\\\search\\\\post\\\\[search_word].js\";\nimport React, { useEffect, useCallback } from \"react\";\nimport AppLayout from \"../../../components/AppLayout\";\nimport Head from \"next/head\";\nimport PostForm from \"../../../components/PostForm\";\nimport PostCard from \"../../../components/PostCard\";\nimport { SEARCH_POSTS_REQUEST } from '../../../reducers/post';\nimport { LOAD_USER_REQUEST } from '../../../reducers/user';\nimport { useSelector, useDispatch } from 'react-redux';\nimport wrapper from '../../../store/configureStore';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport { Button } from \"antd\"; // import Router from 'next/router';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  const {\n    search_word\n  } = router.query; // const gotoMain = useCallback(() => {\n  //     Router.replace('/');\n  // }, [searchPostsDone]);\n  // useEffect(() => {\n  //     function onScroll() {\n  //         // console.log(window.scrollY + document.documentElement.clientHeight, document.documentElement.scrollHeight);\n  //         if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 300) {\n  //             // console.log(\"화면이 바닥에 도달했습니다.\");\n  //             if (hasMorePosts && !loadPostsLoading) {\n  //                 console.log(\"화면이 바닥에 도달 + 포스팅 추가!!\");\n  //                 // mainPosts 배열의 개수 - 1이 마지막 요소의 인덱스 번호가 되므로 다음과 같이 indec 번호를 가져 온다.\n  //                 const lastId = mainPosts[mainPosts.length - 1]?.id;\n  //                 dispatch({\n  //                     type: LOAD_POSTS_REQUEST,\n  //                     // data: mainPosts[mainPosts.length - 1].id,\n  //                     lastId: lastId // 그냥 lastId만 써도 된다.\n  //                 });\n  //             }\n  //         }\n  //     }\n  //     window.addEventListener('scroll', onScroll);\n  //     return () => {\n  //         window.removeEventListener('scroll', onScroll);\n  //     }\n  // }, [mainPosts, hasMorePosts, loadPostsLoading]);\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 20\n    }, this), mainPosts.map(c => {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: c\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this);\n    }), searchPostsDone ? /*#__PURE__*/_jsxDEV(Button, {\n      onCLick: gotoMain,\n      children: \"go to main\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 32\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(context.req.headers);\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST\n  });\n  context.store.dispatch({\n    type: SEARCH_POSTS_REQUEST,\n    data: context.params.search_world\n  }); // 아래의 두줄은success 요청할때까지 기다리라는 뜻\n\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Home;","map":{"version":3,"sources":["C:/nodebird/front/pages/search/post/[search_word].js"],"names":["React","useEffect","useCallback","AppLayout","Head","PostForm","PostCard","SEARCH_POSTS_REQUEST","LOAD_USER_REQUEST","useSelector","useDispatch","wrapper","END","axios","Button","Home","me","state","user","dispatch","mainPosts","hasMorePosts","loadPostsLoading","post","search_word","router","query","map","c","id","searchPostsDone","gotoMain","getServerSideProps","context","console","log","req","headers","cookie","defaults","Cookie","store","type","data","params","search_world","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback } from \"react\";\r\nimport AppLayout from \"../../../components/AppLayout\";\r\nimport Head from \"next/head\";\r\nimport PostForm from \"../../../components/PostForm\";\r\nimport PostCard from \"../../../components/PostCard\";\r\nimport { SEARCH_POSTS_REQUEST } from '../../../reducers/post';\r\nimport { LOAD_USER_REQUEST } from '../../../reducers/user';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport wrapper from '../../../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport { Button } from \"antd\";\r\n// import Router from 'next/router';\r\n\r\n\r\nconst Home = () => {\r\n    const { me } = useSelector((state) => state.user);\r\n    const dispatch = useDispatch();\r\n    const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\r\n    const { search_word } = router.query;\r\n\r\n    // const gotoMain = useCallback(() => {\r\n    //     Router.replace('/');\r\n    // }, [searchPostsDone]);\r\n\r\n    // useEffect(() => {\r\n    //     function onScroll() {\r\n    //         // console.log(window.scrollY + document.documentElement.clientHeight, document.documentElement.scrollHeight);\r\n    //         if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 300) {\r\n    //             // console.log(\"화면이 바닥에 도달했습니다.\");\r\n\r\n    //             if (hasMorePosts && !loadPostsLoading) {\r\n    //                 console.log(\"화면이 바닥에 도달 + 포스팅 추가!!\");\r\n    //                 // mainPosts 배열의 개수 - 1이 마지막 요소의 인덱스 번호가 되므로 다음과 같이 indec 번호를 가져 온다.\r\n    //                 const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n    //                 dispatch({\r\n    //                     type: LOAD_POSTS_REQUEST,\r\n    //                     // data: mainPosts[mainPosts.length - 1].id,\r\n    //                     lastId: lastId // 그냥 lastId만 써도 된다.\r\n    //                 });\r\n    //             }\r\n\r\n    //         }\r\n    //     }\r\n    //     window.addEventListener('scroll', onScroll);\r\n    //     return () => {\r\n    //         window.removeEventListener('scroll', onScroll);\r\n    //     }\r\n    // }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            <Head>\r\n                <title>Home</title>\r\n            </Head>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((c) => {\r\n                return (\r\n                    <PostCard key={c.id} post={c} />\r\n                );\r\n            })}\r\n            {searchPostsDone ? <Button onCLick={gotoMain}>go to main</Button> : null}\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n\r\n    console.log(context.req.headers);\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_USER_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: SEARCH_POSTS_REQUEST,\r\n        data: context.params.search_world\r\n    });\r\n\r\n    // 아래의 두줄은success 요청할때까지 기다리라는 뜻\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;\r\n\r\n"]},"metadata":{},"sourceType":"module"}