{"ast":null,"code":"var _jsxFileName = \"C:\\\\prepare\\\\front\\\\pages\\\\index.js\";\nimport React, { useEffect } from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport Head from \"next/head\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport { useSelector, useDispatch } from 'react-redux';\nimport wrapper from '../store/configureStore';\nimport { END } from 'redux-saga';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post); // useEffect(() => {\n  //     dispatch({\n  //         type: LOAD_USER_REQUEST,\n  //     });\n  //     dispatch({\n  //         type: LOAD_POSTS_REQUEST,\n  //     });\n  // }, []);    \n\n  useEffect(() => {\n    function onScroll() {\n      // console.log(window.scrollY + document.documentElement.clientHeight, document.documentElement.scrollHeight);\n      if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 300) {\n        // console.log(\"화면이 바닥에 도달했습니다.\");\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          console.log(\"화면이 바닥에 도달 + 포스팅 추가!!\"); // mainPosts 배열의 개수 - 1이 마지막 요소의 인덱스 번호가 되므로 다음과 같이 indec 번호를 가져 온다.\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            // data: mainPosts[mainPosts.length - 1].id,\n            lastId: lastId // 그냥 lastId만 써도 된다.\n\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 20\n    }, this), mainPosts.map(c => {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: c\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  }); // 아래의 두줄은success 요청할때까지 기다리라는 뜻\n\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Home;","map":{"version":3,"sources":["C:/prepare/front/pages/index.js"],"names":["React","useEffect","AppLayout","Head","PostForm","PostCard","LOAD_POSTS_REQUEST","LOAD_USER_REQUEST","useSelector","useDispatch","wrapper","END","Home","me","state","user","dispatch","mainPosts","hasMorePosts","loadPostsLoading","post","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","console","log","lastId","length","id","type","addEventListener","removeEventListener","map","c","getServerSideProps","context","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport Head from \"next/head\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport wrapper from '../store/configureStore';\r\nimport { END } from 'redux-saga';\r\n\r\n\r\nconst Home = () => {\r\n    const { me } = useSelector((state) => state.user);\r\n    const dispatch = useDispatch();\r\n    const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\r\n    \r\n    // useEffect(() => {\r\n    //     dispatch({\r\n    //         type: LOAD_USER_REQUEST,\r\n    //     });\r\n\r\n    //     dispatch({\r\n    //         type: LOAD_POSTS_REQUEST,\r\n    //     });\r\n\r\n    // }, []);    \r\n    \r\n    useEffect(() => {\r\n        function onScroll() {\r\n            // console.log(window.scrollY + document.documentElement.clientHeight, document.documentElement.scrollHeight);\r\n            if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 300) {\r\n                // console.log(\"화면이 바닥에 도달했습니다.\");\r\n\r\n                if (hasMorePosts && !loadPostsLoading) {\r\n                    console.log(\"화면이 바닥에 도달 + 포스팅 추가!!\");\r\n                    // mainPosts 배열의 개수 - 1이 마지막 요소의 인덱스 번호가 되므로 다음과 같이 indec 번호를 가져 온다.\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        // data: mainPosts[mainPosts.length - 1].id,\r\n                        lastId:lastId // 그냥 lastId만 써도 된다.\r\n                    });\r\n                }\r\n\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        }\r\n    }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            <Head>\r\n                <title>Home</title>\r\n            </Head>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((c) => {\r\n                return (\r\n                    <PostCard key={c.id} post={c} />\r\n                );\r\n            })}\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n    context.store.dispatch({\r\n        type: LOAD_USER_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });\r\n\r\n    // 아래의 두줄은success 요청할때까지 기다리라는 뜻\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;\r\n\r\n"]},"metadata":{},"sourceType":"module"}