{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport produce from 'immer';\nimport shortId from 'shortid';\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    }\n  };\n};\n\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      userId: 'terecal',\n      nickname: '펭하'\n    },\n    content: 'sample 게시글 #test',\n    Images: [{\n      src: 'https://image.shutterstock.com/image-vector/sample-red-square-grunge-stamp-260nw-338250266.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '첫번째 더미 댓글 fisrt '\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '두번째 더미 댓글 second'\n    }]\n  }],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE'; // 댓글 추가\n\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        // return {\n        //     ...state,\n        //     addCommentLoading: true,\n        //     addCommentDone: false,\n        //     addCommentError: null,\n        // };\n        draft.addCommentLoading = false;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      // 댓글 추가를 위한 state 갱신 하기\n      // 현재 리턴해야할 state 정보는 다음과 같다. <=> initialState[그외, mainPosts:[{},{},{},{}], 댓글 추가 관련 state 변수]\n      // 이걸 재구성 하려면 mainPosts를 먼저 재구성 하고 그다음 ...mainPosts를 이용해 전체를 재구성한뒤 전체를 재구성하며 된다.\n\n      case ADD_COMMENT_SUCCESS:\n        //     // 갱신할 mainPosts 객체 생성 하기\n        //     const mainPosts = [...state.mainPosts]\n        //     // 본문글 정보를 얻기 위한 index 조회 by action.data.postID\n        //     const postIndex = state.mainPosts.findIndex(\n        //         (v) => v.id === action.data.postId\n        //     );\n        //     // 본문글 정보 가져오기 \n        //     const post = { ...state.mainPosts[postIndex] };\n        //     // 원래 댓글 정보 + 새로운 댓글 정보로 댓글 정보 재구성\n        //     const Comments = [...post.Comments, dummyComment(action.data.content),];\n        //     // mainPosts 재구성\n        //     mainPosts[postIndex] = { ...post, Comments };\n        //     // 전체 리턴값 설정 \n        //     return {\n        //         ...state,\n        //         mainPosts,\n        //         addCommentLoading: false,\n        //         addCommentDone: true,\n        //     };\n        // 본문글 찾기\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.postId;\n        });\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentError: action.error\n        });\n\n      case REMOVE_POST_REQUEST:\n        // return {\n        //     ...state,\n        //     removePostLoading: true,\n        //     removePostDone: false,\n        //     removePostError: null,\n        // };\n        draft.addPostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          // filter 의 각각의 요소가 v로 전달 되며 \n          // v.id !== action.data(=post.id) 인것들로 다시 재구성 \n          mainPosts: state.mainPosts.filter(function (v) {\n            console.log(\"삭제할 id : \", action.data);\n            return v.id !== action.data;\n          }),\n          removePostLoading: false,\n          removePostDone: true\n        });\n\n      case REMOVE_POST_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          removePostLoading: false,\n          removePostError: action.error\n        });\n\n      default:\n        return state;\n    }\n  });\n}); // export default reducer;","map":{"version":3,"sources":["C:/prepare/front/reducers/post.js"],"names":["produce","shortId","dummyPost","data","id","content","User","nickname","Images","Comments","dummyComment","generate","initialState","mainPosts","userId","src","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","state","action","draft","type","unshift","error","post","find","v","postId","filter","console","log"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,OAAOC,OAAP,MAAoB,SAApB;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD;AAAA,SAAW;AACzBC,IAAAA,EAAE,EAAED,IAAI,CAACC,EADgB;AAEzBC,IAAAA,OAAO,EAAEF,IAAI,CAACE,OAFW;AAGzBC,IAAAA,IAAI,EAAE;AACFF,MAAAA,EAAE,EAAE,CADF;AAEFG,MAAAA,QAAQ,EAAE;AAFR,KAHmB;AAOzBC,IAAAA,MAAM,EAAE,EAPiB;AAQzBC,IAAAA,QAAQ,EAAE;AARe,GAAX;AAAA,CAAlB;;AAWA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACP,IAAD;AAAA,SAAW;AAC5BC,IAAAA,EAAE,EAAEH,OAAO,CAACU,QAAR,EADwB;AAE5BN,IAAAA,OAAO,EAAEF,IAFmB;AAG5BG,IAAAA,IAAI,EAAE;AACFF,MAAAA,EAAE,EAAE,CADF;AAEFG,MAAAA,QAAQ,EAAE;AAFR;AAHsB,GAAX;AAAA,CAArB;;AAUA,OAAO,IAAMK,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,CACP;AACIT,IAAAA,EAAE,EAAE,CADR;AAEIE,IAAAA,IAAI,EAAE;AACFF,MAAAA,EAAE,EAAE,CADF;AAEFU,MAAAA,MAAM,EAAE,SAFN;AAGFP,MAAAA,QAAQ,EAAE;AAHR,KAFV;AAOIF,IAAAA,OAAO,EAAE,kBAPb;AAQIG,IAAAA,MAAM,EAAE,CAAC;AACLO,MAAAA,GAAG,EAAE;AADA,KAAD,EAEL;AACCA,MAAAA,GAAG,EAAE;AADN,KAFK,EAIL;AACCA,MAAAA,GAAG,EAAE;AADN,KAJK,CARZ;AAeIN,IAAAA,QAAQ,EAAE,CAAC;AACPH,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADC;AAIPF,MAAAA,OAAO,EAAE;AAJF,KAAD,EAKP;AACCC,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADP;AAICF,MAAAA,OAAO,EAAE;AAJV,KALO;AAfd,GADO,CADa;AA+BxBW,EAAAA,cAAc,EAAE,KA/BQ;AAgCxBC,EAAAA,WAAW,EAAE,KAhCW;AAiCxBC,EAAAA,YAAY,EAAE,IAjCU;AAmCxBC,EAAAA,iBAAiB,EAAE,KAnCK;AAoCxBC,EAAAA,cAAc,EAAE,KApCQ;AAqCxBC,EAAAA,eAAe,EAAE,IArCO;AAuCxBC,EAAAA,iBAAiB,EAAE,KAvCK;AAwCxBC,EAAAA,cAAc,EAAE,KAxCQ;AAyCxBC,EAAAA,eAAe,EAAE;AAzCO,CAArB;AA6CP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB,C,CACP;;AACA,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAIP,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBtB,YAAyB;AAAA,MAAXuB,MAAW;AAC7C,SAAOnC,OAAO,CAACkC,KAAD,EAAQ,UAACE,KAAD,EAAW;AAC7B,YAAQD,MAAM,CAACE,IAAf;AACI,WAAKZ,gBAAL;AACIW,QAAAA,KAAK,CAACpB,cAAN,GAAuB,IAAvB;AACAoB,QAAAA,KAAK,CAACnB,WAAN,GAAoB,KAApB;AACAmB,QAAAA,KAAK,CAACf,eAAN,GAAwB,IAAxB;AACA;;AACJ,WAAKK,gBAAL;AACIU,QAAAA,KAAK,CAACvB,SAAN,CAAgByB,OAAhB,CAAwBpC,SAAS,CAACiC,MAAM,CAAChC,IAAR,CAAjC;AACAiC,QAAAA,KAAK,CAACpB,cAAN,GAAuB,KAAvB;AACAoB,QAAAA,KAAK,CAACnB,WAAN,GAAoB,IAApB;AACA;;AACJ,WAAKU,gBAAL;AACIS,QAAAA,KAAK,CAACpB,cAAN,GAAuB,KAAvB;AACAoB,QAAAA,KAAK,CAAClB,YAAN,GAAqBiB,MAAM,CAACI,KAA5B;AACA;;AAEJ,WAAKX,mBAAL;AACI;AACA;AACA;AACA;AACA;AACA;AACAQ,QAAAA,KAAK,CAACjB,iBAAN,GAA0B,KAA1B;AACAiB,QAAAA,KAAK,CAAChB,cAAN,GAAuB,KAAvB;AACAgB,QAAAA,KAAK,CAACf,eAAN,GAAwB,IAAxB;AACA;AACJ;AACA;AACA;;AACA,WAAKQ,mBAAL;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,YAAMW,IAAI,GAAGJ,KAAK,CAACvB,SAAN,CAAgB4B,IAAhB,CAAqB,UAACC,CAAD;AAAA,iBAAOA,CAAC,CAACtC,EAAF,KAAS+B,MAAM,CAAChC,IAAP,CAAYwC,MAA5B;AAAA,SAArB,CAAb;AACAH,QAAAA,IAAI,CAAC/B,QAAL,CAAc6B,OAAd,CAAsB5B,YAAY,CAACyB,MAAM,CAAChC,IAAP,CAAYE,OAAb,CAAlC;AACA+B,QAAAA,KAAK,CAACjB,iBAAN,GAA0B,KAA1B;AACAiB,QAAAA,KAAK,CAAChB,cAAN,GAAuB,IAAvB;AACA;;AAEJ,WAAKU,mBAAL;AACI,+CACOI,KADP;AAEIf,UAAAA,iBAAiB,EAAE,KAFvB;AAGIE,UAAAA,eAAe,EAAEc,MAAM,CAACI;AAH5B;;AAKJ,WAAKR,mBAAL;AACI;AACA;AACA;AACA;AACA;AACA;AACAK,QAAAA,KAAK,CAACpB,cAAN,GAAuB,IAAvB;AACAoB,QAAAA,KAAK,CAACb,cAAN,GAAuB,KAAvB;AACAa,QAAAA,KAAK,CAACZ,eAAN,GAAwB,IAAxB;AACA;;AACJ,WAAKQ,mBAAL;AACI,+CACOE,KADP;AAEI;AACA;AACArB,UAAAA,SAAS,EAAEqB,KAAK,CAACrB,SAAN,CAAgB+B,MAAhB,CAAuB,UAACF,CAAD,EAAO;AACrCG,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBX,MAAM,CAAChC,IAAhC;AACA,mBAAOuC,CAAC,CAACtC,EAAF,KAAS+B,MAAM,CAAChC,IAAvB;AACH,WAHU,CAJf;AAQImB,UAAAA,iBAAiB,EAAE,KARvB;AASIC,UAAAA,cAAc,EAAE;AATpB;;AAWJ,WAAKU,mBAAL;AACI,+CACOC,KADP;AAEIZ,UAAAA,iBAAiB,EAAE,KAFvB;AAGIE,UAAAA,eAAe,EAAEW,MAAM,CAACI;AAH5B;;AAKJ;AACI,eAAOL,KAAP;AA9FR;AAgGH,GAjGa,CAAd;AAmGH,CApGD,E,CAsGA","sourcesContent":["import produce from 'immer';\r\nimport shortId from 'shortid';\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n    },\r\n});\r\n\r\n\r\nexport const initialState = {\r\n    mainPosts: [\r\n        {\r\n            id: 1,\r\n            User: {\r\n                id: 1,\r\n                userId: 'terecal',\r\n                nickname: '펭하',\r\n            },\r\n            content: 'sample 게시글 #test',\r\n            Images: [{\r\n                src: 'https://image.shutterstock.com/image-vector/sample-red-square-grunge-stamp-260nw-338250266.jpg',\r\n            }, {\r\n                src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n            }, {\r\n                src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n            }],\r\n            Comments: [{\r\n                User: {\r\n                    nickname: 'nero',\r\n                },\r\n                content: '첫번째 더미 댓글 fisrt ',\r\n            }, {\r\n                User: {\r\n                    nickname: 'hero',\r\n                },\r\n                content: '두번째 더미 댓글 second',\r\n            }]\r\n        }\r\n    ],\r\n\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n};\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n// 댓글 추가\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n\r\n            case ADD_COMMENT_REQUEST:\r\n                // return {\r\n                //     ...state,\r\n                //     addCommentLoading: true,\r\n                //     addCommentDone: false,\r\n                //     addCommentError: null,\r\n                // };\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            // 댓글 추가를 위한 state 갱신 하기\r\n            // 현재 리턴해야할 state 정보는 다음과 같다. <=> initialState[그외, mainPosts:[{},{},{},{}], 댓글 추가 관련 state 변수]\r\n            // 이걸 재구성 하려면 mainPosts를 먼저 재구성 하고 그다음 ...mainPosts를 이용해 전체를 재구성한뒤 전체를 재구성하며 된다.\r\n            case ADD_COMMENT_SUCCESS:\r\n                //     // 갱신할 mainPosts 객체 생성 하기\r\n                //     const mainPosts = [...state.mainPosts]\r\n                //     // 본문글 정보를 얻기 위한 index 조회 by action.data.postID\r\n                //     const postIndex = state.mainPosts.findIndex(\r\n                //         (v) => v.id === action.data.postId\r\n                //     );\r\n                //     // 본문글 정보 가져오기 \r\n                //     const post = { ...state.mainPosts[postIndex] };\r\n                //     // 원래 댓글 정보 + 새로운 댓글 정보로 댓글 정보 재구성\r\n                //     const Comments = [...post.Comments, dummyComment(action.data.content),];\r\n                //     // mainPosts 재구성\r\n                //     mainPosts[postIndex] = { ...post, Comments };\r\n                //     // 전체 리턴값 설정 \r\n                //     return {\r\n                //         ...state,\r\n                //         mainPosts,\r\n                //         addCommentLoading: false,\r\n                //         addCommentDone: true,\r\n                //     };\r\n\r\n                // 본문글 찾기\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n\r\n            case ADD_COMMENT_FAILURE:\r\n                return {\r\n                    ...state,\r\n                    addCommentLoading: false,\r\n                    addCommentError: action.error,\r\n                };\r\n            case REMOVE_POST_REQUEST:\r\n                // return {\r\n                //     ...state,\r\n                //     removePostLoading: true,\r\n                //     removePostDone: false,\r\n                //     removePostError: null,\r\n                // };\r\n                draft.addPostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                return {\r\n                    ...state,\r\n                    // filter 의 각각의 요소가 v로 전달 되며 \r\n                    // v.id !== action.data(=post.id) 인것들로 다시 재구성 \r\n                    mainPosts: state.mainPosts.filter((v) => {\r\n                        console.log(\"삭제할 id : \", action.data);\r\n                        return v.id !== action.data\r\n                    }),\r\n                    removePostLoading: false,\r\n                    removePostDone: true,\r\n                };\r\n            case REMOVE_POST_FAILURE:\r\n                return {\r\n                    ...state,\r\n                    removePostLoading: false,\r\n                    removePostError: action.error,\r\n                };\r\n            default:\r\n                return state;\r\n        }\r\n    });\r\n\r\n}\r\n\r\n// export default reducer;\r\n"]},"metadata":{},"sourceType":"module"}