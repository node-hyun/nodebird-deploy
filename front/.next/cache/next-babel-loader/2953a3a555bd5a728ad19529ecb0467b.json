{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from 'shortid';\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n});\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      userId: 'terecal',\n      nickname: '펭하'\n    },\n    content: 'sample 게시글 #test',\n    Images: [{\n      src: 'https://image.shutterstock.com/image-vector/sample-red-square-grunge-stamp-260nw-338250266.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '첫번째 더미 댓글 fisrt '\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '두번째 더미 댓글 second'\n    }]\n  }],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; // 댓글 추가\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostDone: true,\n        mainPosts: [dummyPost(action.data), ...state.mainPosts]\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      // When:\n      // 리덕스 사가에서 댓글 추가 성공시(db에 api 요청 성공시) 입력한 댓글 정보와 함께 요청\n      // 어떤 정보가 넘어오나? \n      // 1.action.data.postId(본문 id), action.data.content(추가한 댓글 정보), action.data.userId(단 더미 댓글 정보에는 사용하지 않음 )\n      // 댓글 정보 갱신을 위한 리턴 해야할 객체 형식:\n      // ex) return { 그외, mainPosts:[그외, {그외,Comments[{기존 댓글 정보 + 추가 댓글 정보}]}], 댓글 추가 관련 상태 변수 설정 }\n      // how\n      // mainPosts의 그외는 row수많큼 존재하므로 부분 갱신 후  \n      // ...mainPosts를 활용하여 리턴값 설정 \n      // 재구성할 mainPosts 객체 생성 \n      const mainPosts = [...state.mainPosts]; // 본문 id로 postIndex 조회\n\n      postIndex = mainPosts.findIndex(v => v.id == action.data.postId);\n      post = mainPosts[postIndex]; // 갱신용 댓글 정보 생성\n\n      Comments = [...post.Comments, dummyComment(action.data.text)]; // mainPosts 부분 갱신 하기\n\n      mainPosts[postIndex] = _objectSpread(_objectSpread({}, post), {}, {\n        Comments\n      }); // mainPosts를 이용한 전체 갱신값 구성 + 댓글 추가 관련 state 설정\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // 그외\n        mainPosts,\n        // 부분 갱신한 그외 활용\n        addCommentLoading,\n        // 로딩 false;\n        addCommentError: false,\n        // 에러 false\n        addCommentDone: true // 완료 true\n\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/prepare/front/reducers/post.js"],"names":["shortId","dummyPost","data","id","content","User","nickname","Images","Comments","dummyComment","generate","initialState","mainPosts","userId","src","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","reducer","state","action","type","error","postIndex","findIndex","v","postId","post","text"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n    },\r\n});\r\n\r\n\r\nexport const initialState = {\r\n    mainPosts: [\r\n        {\r\n            id: 1,\r\n            User: {\r\n                id: 1, \r\n                userId: 'terecal',\r\n                nickname: '펭하',\r\n            },\r\n            content: 'sample 게시글 #test',\r\n            Images: [{\r\n                src: 'https://image.shutterstock.com/image-vector/sample-red-square-grunge-stamp-260nw-338250266.jpg',\r\n            }, {\r\n                src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n            }, {\r\n                src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n            }],\r\n            Comments: [{\r\n                User: {\r\n                    nickname: 'nero',\r\n                },\r\n                content: '첫번째 더미 댓글 fisrt ',\r\n            }, {\r\n                User: {\r\n                    nickname: 'hero',\r\n                },\r\n                content: '두번째 더미 댓글 second',\r\n            }]\r\n        }\r\n    ],\r\n\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n\r\n};\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n// 댓글 추가\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                addPostLoading: true,\r\n                addPostDone: false,\r\n                addPostError: null,\r\n            };\r\n        case ADD_POST_SUCCESS:\r\n            \r\n            return {\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostDone: true,\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n            };\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostError: action.error,\r\n            };\r\n\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: true,\r\n                addCommentDone: false,\r\n                addCommentError: null,\r\n            };\r\n\r\n            case ADD_COMMENT_SUCCESS:\r\n            // When:\r\n            // 리덕스 사가에서 댓글 추가 성공시(db에 api 요청 성공시) 입력한 댓글 정보와 함께 요청\r\n            // 어떤 정보가 넘어오나? \r\n            // 1.action.data.postId(본문 id), action.data.content(추가한 댓글 정보), action.data.userId(단 더미 댓글 정보에는 사용하지 않음 )\r\n\r\n            // 댓글 정보 갱신을 위한 리턴 해야할 객체 형식:\r\n            // ex) return { 그외, mainPosts:[그외, {그외,Comments[{기존 댓글 정보 + 추가 댓글 정보}]}], 댓글 추가 관련 상태 변수 설정 }\r\n\r\n            // how\r\n            // mainPosts의 그외는 row수많큼 존재하므로 부분 갱신 후  \r\n            // ...mainPosts를 활용하여 리턴값 설정 \r\n\r\n            // 재구성할 mainPosts 객체 생성 \r\n            const mainPosts = [...state.mainPosts]\r\n\r\n            // 본문 id로 postIndex 조회\r\n            postIndex = mainPosts.findIndex(\r\n                (v) => v.id == action.data.postId\r\n            );\r\n            post = mainPosts[postIndex]\r\n            // 갱신용 댓글 정보 생성\r\n            Comments = [...post.Comments, dummyComment(action.data.text)]\r\n            \r\n            // mainPosts 부분 갱신 하기\r\n            mainPosts[postIndex] = { ...post, Comments };\r\n\r\n            // mainPosts를 이용한 전체 갱신값 구성 + 댓글 추가 관련 state 설정\r\n            return {\r\n                ...state, // 그외\r\n                mainPosts, // 부분 갱신한 그외 활용\r\n                addCommentLoading, // 로딩 false;\r\n                addCommentError: false, // 에러 false\r\n                addCommentDone: true, // 완료 true\r\n            }\r\n        case ADD_COMMENT_FAILURE:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: false,\r\n                addCommentError: action.error,\r\n            };\r\n\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}