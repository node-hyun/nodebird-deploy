{"ast":null,"code":"var _jsxFileName = \"C:\\\\nodebird\\\\front\\\\pages\\\\user\\\\[id].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Avatar, Card } from 'antd';\nimport { END } from 'redux-saga';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\nimport PostCard from '../../components/PostCard';\nimport wrapper from '../../store/configureStore';\nimport AppLayout from '../../components/AppLayout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar User = function User() {\n  _s();\n\n  var dispatch = useDispatch();\n  var router = useRouter();\n  var id = router.query.id;\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts,\n      hasMorePosts = _useSelector.hasMorePosts,\n      loadUserPostsLoading = _useSelector.loadUserPostsLoading;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      userInfo = _useSelector2.userInfo;\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_USER_REQUEST,\n      data: id\n    });\n    dispatch({\n      type: LOAD_USER_POSTS_REQUEST,\n      data: id\n    });\n    dispatch({\n      type: LOAD_MY_INFO_REQUEST\n    });\n    console.log(\"userInfo: \", userInfo);\n  }, []);\n  useEffect(function () {\n    var onScroll = function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadUserPostsLoading) {\n          dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\n            data: id\n          });\n        }\n      }\n    };\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePosts, id]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [userInfo && /*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: [userInfo.nickname, \" \\uB2D8\\uC758 \\uAE00\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        property: \"og:title\",\n        content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        property: \"og:description\",\n        content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        property: \"og:image\",\n        content: \"https://nodebird.com/favicon.ico\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        property: \"og:url\",\n        content: \"https://nodebird.com/user/\".concat(id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, _this), userInfo && userInfo.nickname, \" \\uB2D8\\uC758 \\uD3EC\\uC2A4\\uD305 \\uBAA9\\uB85D\\uC740 \\uB2E4\\uC74C\\uACFC \\uAC19\\uC2B5\\uB2C8\\uB2E4.\", mainPosts.map(function (c) {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: c\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, _this) // <AppLayout>\n  //     <Head>\n  //         <title>\n  //             {userInfo.nickname}\n  //   님의 글\n  // </title>\n  //         <meta name=\"description\" content={`${userInfo.nickname}님의 게시글`} />\n  //         <meta property=\"og:title\" content={`${userInfo.nickname}님의 게시글`} />\n  //         <meta property=\"og:description\" content={`${userInfo.nickname}님의 게시글`} />\n  //         <meta property=\"og:image\" content=\"https://nodebird.com/favicon.ico\" />\n  //         <meta property=\"og:url\" content={`https://nodebird.com/user/${id}`} />\n  //     </Head>\n  //     {userInfo\n  //         ? (\n  //             <Card\n  //                 actions={[\n  //                     <div key=\"twit\">\n  //                         짹짹\n  //         <br />\n  //                         {userInfo.Posts}\n  //                     </div>,\n  //                     <div key=\"following\">\n  //                         팔로잉\n  //         <br />\n  //                         {userInfo.Followings}\n  //                     </div>,\n  //                     <div key=\"follower\">\n  //                         팔로워\n  //         <br />\n  //                         {userInfo.Followers}\n  //                     </div>,\n  //                 ]}\n  //             >\n  //                 <Card.Meta\n  //                 // avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\n  //                 // title={userInfo.nickname}\n  //                 />\n  //             </Card>\n  //         )\n  //         : null}\n  //     {mainPosts.map((c) => (\n  //         <PostCard key={c.id} post={c} />\n  //     ))}\n  // </AppLayout>\n  ;\n}; // export const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n//     const cookie = context.req ? context.req.headers.cookie : '';\n//     axios.defaults.headers.Cookie = '';\n//     if (context.req && cookie) {\n//         axios.defaults.headers.Cookie = cookie;\n//     }\n//     context.store.dispatch({\n//         type: LOAD_USER_POSTS_REQUEST,\n//         data: context.params.id,\n//     });\n//     context.store.dispatch({\n//         type: LOAD_MY_INFO_REQUEST,\n//     });\n//     context.store.dispatch({\n//         type: LOAD_USER_REQUEST,\n//         data: context.params.id,\n//     });\n//     context.store.dispatch(END);\n//     await context.store.sagaTask.toPromise();\n//     console.log('getState', context.store.getState().post.mainPosts);\n//     return { props: {} };\n// });\n\n\n_s(User, \"xFRJtzTd5ijeSg8U2b62ktCHhZE=\", false, function () {\n  return [useDispatch, useRouter, useSelector, useSelector];\n});\n\n_c = User;\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["C:/nodebird/front/pages/user/[id].js"],"names":["React","useCallback","useEffect","useDispatch","useSelector","Avatar","Card","END","Head","useRouter","axios","LOAD_USER_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","LOAD_USER_REQUEST","PostCard","wrapper","AppLayout","User","dispatch","router","id","query","state","post","mainPosts","hasMorePosts","loadUserPostsLoading","user","userInfo","type","data","console","log","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","addEventListener","removeEventListener","nickname","map","c"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Avatar, Card } from 'antd';\r\nimport { END } from 'redux-saga';\r\nimport Head from 'next/head';\r\nimport { useRouter } from 'next/router';\r\n\r\nimport axios from 'axios';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\r\nimport PostCard from '../../components/PostCard';\r\nimport wrapper from '../../store/configureStore';\r\nimport AppLayout from '../../components/AppLayout';\r\n\r\nconst User = () => {\r\n    const dispatch = useDispatch();\r\n    const router = useRouter();\r\n    const { id } = router.query;\r\n    const { mainPosts, hasMorePosts, loadUserPostsLoading } = useSelector((state) => state.post);\r\n    const { userInfo } = useSelector((state) => state.user);\r\n\r\n    useEffect(() => {\r\n        dispatch({\r\n            type: LOAD_USER_REQUEST,\r\n            data: id,\r\n        });\r\n        dispatch({\r\n            type: LOAD_USER_POSTS_REQUEST,\r\n            data: id,\r\n        });\r\n        dispatch({\r\n            type: LOAD_MY_INFO_REQUEST,\r\n        });\r\n\r\n        console.log(\"userInfo: \", userInfo);\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const onScroll = () => {\r\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePosts && !loadUserPostsLoading) {\r\n                    dispatch({\r\n                        type: LOAD_USER_POSTS_REQUEST,\r\n                        lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\r\n                        data: id,\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts.length, hasMorePosts, id]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            {/* <div> {id} 로 유저 정보, 유저 포스팅 정보 검색 하기</div> */}\r\n            {userInfo &&\r\n                <Head>\r\n                    <title>\r\n                        {userInfo.nickname} 님의 글\r\n                    </title>\r\n                    <meta name=\"description\" content={`${userInfo.nickname}님의 게시글`} />\r\n                    <meta property=\"og:title\" content={`${userInfo.nickname}님의 게시글`} />\r\n                    <meta property=\"og:description\" content={`${userInfo.nickname}님의 게시글`} />\r\n                    <meta property=\"og:image\" content=\"https://nodebird.com/favicon.ico\" />\r\n                    <meta property=\"og:url\" content={`https://nodebird.com/user/${id}`} />\r\n                </Head>\r\n            }\r\n\r\n            {userInfo && userInfo.nickname} 님의 포스팅 목록은 다음과 같습니다.\r\n\r\n            {mainPosts.map((c) => (\r\n                <PostCard key={c.id} post={c} />\r\n            ))}\r\n\r\n        </AppLayout>\r\n\r\n        // <AppLayout>\r\n        //     <Head>\r\n        //         <title>\r\n        //             {userInfo.nickname}\r\n        //   님의 글\r\n        // </title>\r\n        //         <meta name=\"description\" content={`${userInfo.nickname}님의 게시글`} />\r\n        //         <meta property=\"og:title\" content={`${userInfo.nickname}님의 게시글`} />\r\n        //         <meta property=\"og:description\" content={`${userInfo.nickname}님의 게시글`} />\r\n        //         <meta property=\"og:image\" content=\"https://nodebird.com/favicon.ico\" />\r\n        //         <meta property=\"og:url\" content={`https://nodebird.com/user/${id}`} />\r\n        //     </Head>\r\n        //     {userInfo\r\n        //         ? (\r\n        //             <Card\r\n        //                 actions={[\r\n        //                     <div key=\"twit\">\r\n        //                         짹짹\r\n        //         <br />\r\n        //                         {userInfo.Posts}\r\n        //                     </div>,\r\n        //                     <div key=\"following\">\r\n        //                         팔로잉\r\n        //         <br />\r\n        //                         {userInfo.Followings}\r\n        //                     </div>,\r\n        //                     <div key=\"follower\">\r\n        //                         팔로워\r\n        //         <br />\r\n        //                         {userInfo.Followers}\r\n        //                     </div>,\r\n        //                 ]}\r\n        //             >\r\n        //                 <Card.Meta\r\n        //                 // avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n        //                 // title={userInfo.nickname}\r\n        //                 />\r\n        //             </Card>\r\n        //         )\r\n        //         : null}\r\n        //     {mainPosts.map((c) => (\r\n        //         <PostCard key={c.id} post={c} />\r\n        //     ))}\r\n        // </AppLayout>\r\n    );\r\n};\r\n\r\n// export const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n//     const cookie = context.req ? context.req.headers.cookie : '';\r\n//     axios.defaults.headers.Cookie = '';\r\n//     if (context.req && cookie) {\r\n//         axios.defaults.headers.Cookie = cookie;\r\n//     }\r\n//     context.store.dispatch({\r\n//         type: LOAD_USER_POSTS_REQUEST,\r\n//         data: context.params.id,\r\n//     });\r\n//     context.store.dispatch({\r\n//         type: LOAD_MY_INFO_REQUEST,\r\n//     });\r\n//     context.store.dispatch({\r\n//         type: LOAD_USER_REQUEST,\r\n//         data: context.params.id,\r\n//     });\r\n//     context.store.dispatch(END);\r\n//     await context.store.sagaTask.toPromise();\r\n//     console.log('getState', context.store.getState().post.mainPosts);\r\n//     return { props: {} };\r\n// });\r\n\r\nexport default User;"]},"metadata":{},"sourceType":"module"}