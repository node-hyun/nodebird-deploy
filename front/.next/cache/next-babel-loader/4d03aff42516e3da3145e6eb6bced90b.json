{"ast":null,"code":"import { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios'; // import shortId from 'shortid';\n\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, DELETE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, SEARCH_POSTS_REQUEST, SEARCH_POSTS_SUCCESS, SEARCH_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, UPDATE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; // add your api 1122\n\nfunction updatePostAPI(data) {\n  return axios.put(`/post/${data.postId}/update`, data);\n}\n\nfunction* updatePost(action) {\n  try {\n    const result = yield call(updatePostAPI, action.data);\n    console.log(\"result for update post : \", result);\n    yield put({\n      type: UPDATE_POST_SUCCESS,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPDATE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  // return axios.get(`/hashtag/${data}?lastId=${lastid || 0}`);\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction SearchPostsAPI(data) {\n  console.log('data : ', data);\n  return axios.get(`/search/posts/${data.search_word}/${data.lastId || 0}?`);\n}\n\nfunction* searchPosts(action) {\n  try {\n    console.log(\"action.data : \", action.data);\n    const result = yield call(SearchPostsAPI, action.data);\n    console.log(\"result for SearchPostsAPI : \", result);\n    console.log(\"result for SearchPostsAPI : \", result.data.length);\n    yield put({\n      type: SEARCH_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(\"error : \", err);\n    console.error(err);\n    yield put({\n      type: SEARCH_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  // console.log(\"data for posting at saga : \", data);\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"result for posting : \", result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  // return axios.delete('/api/post', data);\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(removePostAPI, action.data);\n    console.log(\"result from backend, postId 확인 하기 : \", result.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      // data: action.data,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      // data: action.data,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  console.log(\"data from saga for add comment : \", data);\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  console.log(\"addComent action : \", action.data);\n\n  try {\n    // yield delay(1000);\n    const result = yield call(addCommentAPI, action.data);\n    console.log(\"result(response from backend from insert comment): \", result);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(\"댓글 에러 : \", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  // return axios.get('/posts', data);\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    console.log(\"result for loadPostsAPI : \", result);\n    console.log(\"result for loadPostsAPI : \", result.data.length);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  console.log(\"data 확인 from saga : \", data);\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction deleteCommentAPI(data) {\n  console.log(\"data 확인 from saga : \", data);\n  return axios.delete(`post/comment/${data.PostId}/${data.CommentId}`);\n}\n\nfunction* deleteComment(action) {\n  try {\n    const result = yield call(deleteCommentAPI, action.data);\n    console.log(\"삭제에 대한 응답 : \", result.data);\n    yield put({\n      type: DELETE_COMMENT_SUCCESS,\n      // 라우터에서 댓글 삭제한뒤 PostId와 CommentId 리턴 \n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: DELETE_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchDeleteComment() {\n  yield takeLatest(DELETE_COMMENT_REQUEST, deleteComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchSearchPosts() {\n  yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchLoadUserPosts() {\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchUpdatePost() {\n  yield throttle(5000, UPDATE_POST_REQUEST, updatePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts), fork(watchUploadImages), fork(watchDeleteComment), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchSearchPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUpdatePost)]);\n}","map":{"version":3,"sources":["C:/nodebird-deploy/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","throttle","call","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","SEARCH_POSTS_REQUEST","SEARCH_POSTS_SUCCESS","SEARCH_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","updatePostAPI","data","postId","updatePost","action","result","console","log","type","id","err","error","response","loadUserPostsAPI","lastId","get","loadUserPosts","loadHashtagPostsAPI","encodeURIComponent","loadHashtagPosts","SearchPostsAPI","search_word","searchPosts","length","retweetAPI","post","retweet","addPostAPI","addPost","removePostAPI","delete","removePost","addCommentAPI","addComment","loadPostsAPI","loadPosts","uploadImagesAPI","uploadImages","deleteCommentAPI","PostId","CommentId","deleteComment","likePostAPI","patch","likePost","unlikePostAPI","unlikePost","watchLoadPosts","watchRemovePost","watchAddPost","watchAddComment","watchUploadImages","watchDeleteComment","watchLikePost","watchUnlikePost","watchRetweet","watchSearchPosts","watchLoadHashtagPosts","watchLoadUserPosts","watchUpdatePost","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,QAA5C,EAAsDC,IAAtD,QAAkE,oBAAlE;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SACIC,gBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,EAIIC,mBAJJ,EAKIC,mBALJ,EAMIC,mBANJ,EAQIC,mBARJ,EASIC,mBATJ,EAUIC,mBAVJ,EAYIC,kBAZJ,EAaIC,kBAbJ,EAcIC,kBAdJ,EAgBIC,qBAhBJ,EAiBIC,qBAjBJ,EAkBIC,qBAlBJ,EAoBIC,sBApBJ,EAqBIC,sBArBJ,EAsBIC,sBAtBJ,EAwBIC,iBAxBJ,EAyBIC,iBAzBJ,EA0BIC,iBA1BJ,EA4BIC,mBA5BJ,EA6BIC,mBA7BJ,EA8BIC,mBA9BJ,EAgCIC,eAhCJ,EAiCIC,eAjCJ,EAkCIC,eAlCJ,EAoCIC,oBApCJ,EAqCIC,oBArCJ,EAsCIC,oBAtCJ,EAwCIC,0BAxCJ,EAyCIC,0BAzCJ,EA0CIC,0BA1CJ,EA4CIC,uBA5CJ,EA6CIC,uBA7CJ,EA8CIC,uBA9CJ,EAgDIC,mBAhDJ,EAiDIC,mBAjDJ,EAkDIC,mBAlDJ,QAqDO,kBArDP;AAsDA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD,C,CAGA;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,SAAO3C,KAAK,CAACJ,GAAN,CAAW,SAAQ+C,IAAI,CAACC,MAAO,SAA/B,EAAyCD,IAAzC,CAAP;AACH;;AAED,UAAUE,UAAV,CAAqBC,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMhD,IAAI,CAAC2C,aAAD,EAAgBI,MAAM,CAACH,IAAvB,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,MAAzC;AAEA,UAAMnD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEZ,mBADA;AAENK,MAAAA,IAAI,EAAEI,MAAM,CAACJ,IAAP,CAAYQ;AAFZ,KAAD,CAAT;AAKH,GATD,CASE,OAAOC,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA,UAAMxD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEX,mBADA;AAENI,MAAAA,IAAI,EAAES,GAAG,CAACE,QAAJ,CAAaX;AAFb,KAAD,CAAT;AAIH;AACJ;;AAID,SAASY,gBAAT,CAA0BZ,IAA1B,EAAgCa,MAAhC,EAAwC;AACpC,SAAOxD,KAAK,CAACyD,GAAN,CAAW,SAAQd,IAAK,iBAAgBa,MAAM,IAAI,CAAE,EAApD,CAAP;AACH;;AAED,UAAUE,aAAV,CAAwBZ,MAAxB,EAAgC;AAC5B,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMhD,IAAI,CAACwD,gBAAD,EAAmBT,MAAM,CAACH,IAA1B,EAAgCG,MAAM,CAACU,MAAvC,CAAzB;AACA,UAAM5D,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEf,uBADA;AAENQ,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOS,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA,UAAMxD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEd,uBADA;AAENO,MAAAA,IAAI,EAAES,GAAG,CAACE,QAAJ,CAAaX;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASgB,mBAAT,CAA6BhB,IAA7B,EAAmCa,MAAnC,EAA2C;AACvC;AACA,SAAOxD,KAAK,CAACyD,GAAN,CAAW,YAAWG,kBAAkB,CAACjB,IAAD,CAAO,WAAUa,MAAM,IAAI,CAAE,EAArE,CAAP;AACH;;AAED,UAAUK,gBAAV,CAA2Bf,MAA3B,EAAmC;AAC/B,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMhD,IAAI,CAAC4D,mBAAD,EAAsBb,MAAM,CAACH,IAA7B,EAAmCG,MAAM,CAACU,MAA1C,CAAzB;AACA,UAAM5D,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAElB,0BADA;AAENW,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOS,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA,UAAMxD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEjB,0BADA;AAENU,MAAAA,IAAI,EAAES,GAAG,CAACE,QAAJ,CAAaX;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASmB,cAAT,CAAwBnB,IAAxB,EAA8B;AAC1BK,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,IAAvB;AACA,SAAO3C,KAAK,CAACyD,GAAN,CAAW,iBAAgBd,IAAI,CAACoB,WAAY,IAAGpB,IAAI,CAACa,MAAL,IAAe,CAAE,GAAhE,CAAP;AACH;;AAED,UAAUQ,WAAV,CAAsBlB,MAAtB,EAA8B;AAC1B,MAAI;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,MAAM,CAACH,IAArC;AACA,UAAMI,MAAM,GAAG,MAAMhD,IAAI,CAAC+D,cAAD,EAAiBhB,MAAM,CAACH,IAAxB,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,MAA5C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,MAAM,CAACJ,IAAP,CAAYsB,MAAxD;AAEA,UAAMrE,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAErB,oBADA;AAENc,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAKH,GAXD,CAWE,OAAOS,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBG,GAAxB;AACAJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA,UAAMxD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEpB,oBADA;AAENa,MAAAA,IAAI,EAAES,GAAG,CAACE,QAAJ,CAAaX;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASuB,UAAT,CAAoBvB,IAApB,EAA0B;AACtB,SAAO3C,KAAK,CAACmE,IAAN,CAAY,SAAQxB,IAAK,UAAzB,CAAP;AACH;;AAED,UAAUyB,OAAV,CAAkBtB,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMhD,IAAI,CAACmE,UAAD,EAAapB,MAAM,CAACH,IAApB,CAAzB;AACA,UAAM/C,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAExB,eADA;AAENiB,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOS,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA,UAAMxD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEvB,eADA;AAEN0B,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaX;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAAS0B,UAAT,CAAoB1B,IAApB,EAA0B;AACtB;AACA,SAAO3C,KAAK,CAACmE,IAAN,CAAW,OAAX,EAAoBxB,IAApB,CAAP;AACH;;AAED,UAAU2B,OAAV,CAAkBxB,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMhD,IAAI,CAACsE,UAAD,EAAavB,MAAM,CAACH,IAApB,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,MAArC;AAEA,UAAMnD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAE/C,gBADA;AAENwC,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIA,UAAM/C,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEV,cADA;AAENG,MAAAA,IAAI,EAAEI,MAAM,CAACJ,IAAP,CAAYQ;AAFZ,KAAD,CAAT;AAIH,GAZD,CAYE,OAAOC,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA,UAAMxD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEjD,gBADA;AAEN0C,MAAAA,IAAI,EAAES,GAAG,CAACE,QAAJ,CAAaX;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAAS4B,aAAT,CAAuB5B,IAAvB,EAA6B;AACzB;AACA,SAAO3C,KAAK,CAACwE,MAAN,CAAc,SAAQ7B,IAAK,EAA3B,CAAP;AACH;;AACD,UAAU8B,UAAV,CAAqB3B,MAArB,EAA6B;AACzB,MAAI;AACA;AACA,UAAMC,MAAM,GAAG,MAAMhD,IAAI,CAACwE,aAAD,EAAgBzB,MAAM,CAACH,IAAvB,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoDF,MAAM,CAACJ,IAA3D;AAEA,UAAM/C,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAE1C,mBADA;AAEN;AACAmC,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAHP,KAAD,CAAT;AAMA,UAAM/C,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAET,iBADA;AAEN;AACAE,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAHP,KAAD,CAAT;AAMH,GAjBD,CAiBE,OAAOS,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA,UAAMxD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEzC,mBADA;AAENkC,MAAAA,IAAI,EAAES,GAAG,CAACE,QAAJ,CAAaX;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAAS+B,aAAT,CAAuB/B,IAAvB,EAA6B;AACzBK,EAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDN,IAAjD;AACA,SAAO3C,KAAK,CAACmE,IAAN,CAAY,SAAQxB,IAAI,CAACC,MAAO,UAAhC,EAA2CD,IAA3C,CAAP;AACH;;AAED,UAAUgC,UAAV,CAAqB7B,MAArB,EAA6B;AACzBE,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,MAAM,CAACH,IAA1C;;AACA,MAAI;AACA;AACA,UAAMI,MAAM,GAAG,MAAMhD,IAAI,CAAC2E,aAAD,EAAgB5B,MAAM,CAACH,IAAvB,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ,EAAmEF,MAAnE;AAEA,UAAMnD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAE7C,mBADA;AAENsC,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GATD,CASE,OAAOS,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBG,GAAxB;AACA,UAAMxD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAE5C,mBADA;AAENqC,MAAAA,IAAI,EAAES,GAAG,CAACE,QAAJ,CAAaX;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASiC,YAAT,CAAsBpB,MAAtB,EAA8B;AAC1B;AACA,SAAOxD,KAAK,CAACyD,GAAN,CAAW,iBAAgBD,MAAM,IAAI,CAAE,EAAvC,CAAP;AAEH;;AACD,UAAUqB,SAAV,CAAoB/B,MAApB,EAA4B;AACxB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMhD,IAAI,CAAC6E,YAAD,EAAe9B,MAAM,CAACU,MAAtB,CAAzB;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,MAA1C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,MAAM,CAACJ,IAAP,CAAYsB,MAAtD;AAEA,UAAMrE,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEvC,kBADA;AAENgC,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GATD,CASE,OAAOS,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA,UAAMxD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEtC,kBADA;AAEN+B,MAAAA,IAAI,EAAES,GAAG,CAACE,QAAJ,CAAaX;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASmC,eAAT,CAAyBnC,IAAzB,EAA+B;AAC3BK,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCN,IAApC;AACA,SAAO3C,KAAK,CAACmE,IAAN,CAAW,cAAX,EAA2BxB,IAA3B,CAAP;AACH;;AAED,UAAUoC,YAAV,CAAuBjC,MAAvB,EAA+B;AAC3B,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMhD,IAAI,CAAC+E,eAAD,EAAkBhC,MAAM,CAACH,IAAzB,CAAzB;AACA,UAAM/C,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEpC,qBADA;AAEN6B,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOS,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA,UAAMxD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEnC,qBADA;AAENsC,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaX;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASqC,gBAAT,CAA0BrC,IAA1B,EAAgC;AAC5BK,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCN,IAApC;AACA,SAAO3C,KAAK,CAACwE,MAAN,CAAc,gBAAe7B,IAAI,CAACsC,MAAO,IAAGtC,IAAI,CAACuC,SAAU,EAA3D,CAAP;AACH;;AAED,UAAUC,aAAV,CAAwBrC,MAAxB,EAAgC;AAC5B,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMhD,IAAI,CAACiF,gBAAD,EAAmBlC,MAAM,CAACH,IAA1B,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,MAAM,CAACJ,IAAnC;AAEA,UAAM/C,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEjC,sBADA;AAEN;AACA0B,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAHP,KAAD,CAAT;AAKH,GATD,CASE,OAAOS,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA,UAAMxD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAEhC,sBADA;AAENmC,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaX;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASyC,WAAT,CAAqBzC,IAArB,EAA2B;AACvB,SAAO3C,KAAK,CAACqF,KAAN,CAAa,SAAQ1C,IAAK,OAA1B,CAAP;AACH;;AACD,UAAU2C,QAAV,CAAmBxC,MAAnB,EAA2B;AACvB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMhD,IAAI,CAACqF,WAAD,EAActC,MAAM,CAACH,IAArB,CAAzB;AACA,UAAM/C,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAE9B,iBADA;AAENuB,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOS,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA,UAAMxD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAE7B,iBADA;AAENgC,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaX;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAAS4C,aAAT,CAAuB5C,IAAvB,EAA6B;AACzB,SAAO3C,KAAK,CAACwE,MAAN,CAAc,SAAQ7B,IAAK,OAA3B,CAAP;AACH;;AACD,UAAU6C,UAAV,CAAqB1C,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMhD,IAAI,CAACwF,aAAD,EAAgBzC,MAAM,CAACH,IAAvB,CAAzB;AACA,UAAM/C,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAE3B,mBADA;AAENoB,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOS,GAAP,EAAY;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA,UAAMxD,GAAG,CAAC;AACNsD,MAAAA,IAAI,EAAE1B,mBADA;AAEN6B,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaX;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAU8C,cAAV,GAA2B;AACvB,QAAM3F,QAAQ,CAAC,IAAD,EAAOY,kBAAP,EAA2BmE,SAA3B,CAAd;AACH;;AAED,UAAUa,eAAV,GAA4B;AACxB,QAAM7F,UAAU,CAACU,mBAAD,EAAsBkE,UAAtB,CAAhB;AACH;;AAED,UAAUkB,YAAV,GAAyB;AACrB,QAAM9F,UAAU,CAACK,gBAAD,EAAmBoE,OAAnB,CAAhB;AACH;;AACD,UAAUsB,eAAV,GAA4B;AACxB,QAAM/F,UAAU,CAACO,mBAAD,EAAsBuE,UAAtB,CAAhB;AACH;;AAED,UAAUkB,iBAAV,GAA8B;AAC1B,QAAMhG,UAAU,CAACgB,qBAAD,EAAwBkE,YAAxB,CAAhB;AACH;;AACD,UAAUe,kBAAV,GAA+B;AAC3B,QAAMjG,UAAU,CAACmB,sBAAD,EAAyBmE,aAAzB,CAAhB;AACH;;AAED,UAAUY,aAAV,GAA0B;AACtB,QAAMlG,UAAU,CAACsB,iBAAD,EAAoBmE,QAApB,CAAhB;AACH;;AACD,UAAUU,eAAV,GAA4B;AACxB,QAAMnG,UAAU,CAACyB,mBAAD,EAAsBkE,UAAtB,CAAhB;AACH;;AAED,UAAUS,YAAV,GAAyB;AACrB,QAAMpG,UAAU,CAAC4B,eAAD,EAAkB2C,OAAlB,CAAhB;AACH;;AAED,UAAU8B,gBAAV,GAA6B;AACzB,QAAMrG,UAAU,CAAC+B,oBAAD,EAAuBoC,WAAvB,CAAhB;AACH;;AAED,UAAUmC,qBAAV,GAAkC;AAC9B,QAAMrG,QAAQ,CAAC,IAAD,EAAOiC,0BAAP,EAAmC8B,gBAAnC,CAAd;AACH;;AAED,UAAUuC,kBAAV,GAA+B;AAC3B,QAAMtG,QAAQ,CAAC,IAAD,EAAOoC,uBAAP,EAAgCwB,aAAhC,CAAd;AACH;;AAED,UAAU2C,eAAV,GAA4B;AACxB,QAAMvG,QAAQ,CAAC,IAAD,EAAOuC,mBAAP,EAA4BQ,UAA5B,CAAd;AACH;;AAED,eAAe,UAAUyD,QAAV,GAAqB;AAChC,QAAM7G,GAAG,CAAC,CACNE,IAAI,CAACgG,YAAD,CADE,EAENhG,IAAI,CAACiG,eAAD,CAFE,EAGNjG,IAAI,CAAC+F,eAAD,CAHE,EAIN/F,IAAI,CAAC8F,cAAD,CAJE,EAKN9F,IAAI,CAACkG,iBAAD,CALE,EAMNlG,IAAI,CAACmG,kBAAD,CANE,EAONnG,IAAI,CAACoG,aAAD,CAPE,EAQNpG,IAAI,CAACqG,eAAD,CARE,EASNrG,IAAI,CAACsG,YAAD,CATE,EAUNtG,IAAI,CAACuG,gBAAD,CAVE,EAWNvG,IAAI,CAACwG,qBAAD,CAXE,EAYNxG,IAAI,CAACyG,kBAAD,CAZE,EAaNzG,IAAI,CAAE0G,eAAF,CAbE,CAAD,CAAT;AAeH","sourcesContent":["import { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n// import shortId from 'shortid';\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n\r\n    DELETE_COMMENT_REQUEST,\r\n    DELETE_COMMENT_SUCCESS,\r\n    DELETE_COMMENT_FAILURE,\r\n\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    RETWEET_FAILURE,\r\n\r\n    SEARCH_POSTS_REQUEST,\r\n    SEARCH_POSTS_SUCCESS,\r\n    SEARCH_POSTS_FAILURE,\r\n\r\n    LOAD_HASHTAG_POSTS_REQUEST,\r\n    LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_FAILURE,  \r\n\r\n    LOAD_USER_POSTS_REQUEST,\r\n    LOAD_USER_POSTS_SUCCESS,\r\n    LOAD_USER_POSTS_FAILURE,\r\n\r\n    UPDATE_POST_REQUEST,\r\n    UPDATE_POST_SUCCESS,\r\n    UPDATE_POST_FAILURE ,\r\n\r\n\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\n// add your api 1122\r\nfunction updatePostAPI(data) {\r\n    return axios.put(`/post/${data.postId}/update`, data);\r\n}\r\n\r\nfunction* updatePost(action) {\r\n    try {\r\n        const result = yield call(updatePostAPI, action.data);\r\n        console.log(\"result for update post : \", result);\r\n\r\n        yield put({\r\n            type: UPDATE_POST_SUCCESS,\r\n            data: result.data.id\r\n        });\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPDATE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction loadUserPostsAPI(data, lastId) {\r\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n    // return axios.get(`/hashtag/${data}?lastId=${lastid || 0}`);\r\n    return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction SearchPostsAPI(data) {\r\n    console.log('data : ', data);\r\n    return axios.get(`/search/posts/${data.search_word}/${data.lastId || 0}?`);\r\n}\r\n\r\nfunction* searchPosts(action) {\r\n    try {\r\n        console.log(\"action.data : \", action.data);\r\n        const result = yield call(SearchPostsAPI, action.data);\r\n        console.log(\"result for SearchPostsAPI : \", result);\r\n        console.log(\"result for SearchPostsAPI : \", result.data.length);\r\n\r\n        yield put({\r\n            type: SEARCH_POSTS_SUCCESS,\r\n            data: result.data\r\n        });\r\n\r\n    } catch (err) {\r\n        console.log(\"error : \", err);\r\n        console.error(err);\r\n        yield put({\r\n            type: SEARCH_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    // console.log(\"data for posting at saga : \", data);\r\n    return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log(\"result for posting : \", result);\r\n\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    // return axios.delete('/api/post', data);\r\n    return axios.delete(`/post/${data}`);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(removePostAPI, action.data);\r\n        console.log(\"result from backend, postId 확인 하기 : \", result.data);\r\n\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            // data: action.data,\r\n            data: result.data,\r\n        });\r\n\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            // data: action.data,\r\n            data: result.data,\r\n        });\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    console.log(\"data from saga for add comment : \", data);\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    console.log(\"addComent action : \", action.data);\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log(\"result(response from backend from insert comment): \", result);\r\n\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(\"댓글 에러 : \", err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    // return axios.get('/posts', data);\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n\r\n}\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        console.log(\"result for loadPostsAPI : \", result);\r\n        console.log(\"result for loadPostsAPI : \", result.data.length);\r\n\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    console.log(\"data 확인 from saga : \", data);\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction deleteCommentAPI(data) {\r\n    console.log(\"data 확인 from saga : \", data);\r\n    return axios.delete(`post/comment/${data.PostId}/${data.CommentId}`);\r\n}\r\n\r\nfunction* deleteComment(action) {\r\n    try {\r\n        const result = yield call(deleteCommentAPI, action.data);\r\n        console.log(\"삭제에 대한 응답 : \", result.data);\r\n\r\n        yield put({\r\n            type: DELETE_COMMENT_SUCCESS,\r\n            // 라우터에서 댓글 삭제한뒤 PostId와 CommentId 리턴 \r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: DELETE_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchDeleteComment() {\r\n    yield takeLatest(DELETE_COMMENT_REQUEST, deleteComment);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchSearchPosts() {\r\n    yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchUpdatePost() {\r\n    yield throttle(5000, UPDATE_POST_REQUEST, updatePost)\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPosts),\r\n        fork(watchUploadImages),\r\n        fork(watchDeleteComment),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n        fork(watchSearchPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork (watchUpdatePost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}