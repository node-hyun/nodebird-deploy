{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport Head from \"next/head\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { notification } from \"antd\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Home = function Home() {\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var dispatch = useDispatch();\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostsLoading = _useSelector2.loadPostsLoading,\n      addPostDone = _useSelector2.addPostDone,\n      removePostDone = _useSelector2.removePostDone;\n\n  var _useSelector3 = useSelector(function (state) {\n    return state.user;\n  }),\n      followError = _useSelector3.followError,\n      unfollowError = _useSelector3.unfollowError; // useEffect(() => {\n  //     if (addPostDone){\n  //     }\n  // }, [addPostDone]);\n\n\n  if (followError) {\n    alert(\"followError : \" + followError);\n  }\n\n  if (unfollowError) {\n    alert(\"unfollowError : \" + unfollowError);\n  }\n\n  useEffect(function () {\n    function onScroll() {\n      // console.log(window.scrollY + document.documentElement.clientHeight, document.documentElement.scrollHeight);\n      if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 300) {\n        // console.log(\"화면이 바닥에 도달했습니다.\");\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          console.log(\"화면이 바닥에 도달 + 포스팅 추가!!\"); // mainPosts 배열의 개수 - 1이 마지막 요소의 인덱스 번호가 되므로 다음과 같이 indec 번호를 가져 온다.\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            // data: mainPosts[mainPosts.length - 1].id,\n            lastId: lastId // 그냥 lastId만 써도 된다.\n\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  return /*#__PURE__*/_jsxs(AppLayout, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"Home\"\n      })\n    }), me && /*#__PURE__*/_jsx(PostForm, {}), mainPosts && mainPosts.map(function (c) {\n      return /*#__PURE__*/_jsx(PostCard, {\n        post: c\n      }, c.id);\n    })]\n  });\n};\n\nexport var __N_SSP = true;\nexport default Home;","map":{"version":3,"sources":["C:/nodebird-deploy/front/pages/index.js"],"names":["React","useEffect","AppLayout","Head","PostForm","PostCard","LOAD_POSTS_REQUEST","useSelector","useDispatch","notification","Home","state","user","me","dispatch","post","mainPosts","hasMorePosts","loadPostsLoading","addPostDone","removePostDone","followError","unfollowError","alert","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","console","log","lastId","length","id","type","addEventListener","removeEventListener","map","c"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAIA,SAASC,YAAT,QAA6B,MAA7B;;;;AAIA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,qBACAH,WAAW,CAAC,UAACI,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CADX;AAAA,MACPC,EADO,gBACPA,EADO;;AAEf,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AAFe,sBAGoED,WAAW,CAAC,UAACI,KAAD;AAAA,WAAWA,KAAK,CAACI,IAAjB;AAAA,GAAD,CAH/E;AAAA,MAGPC,SAHO,iBAGPA,SAHO;AAAA,MAGIC,YAHJ,iBAGIA,YAHJ;AAAA,MAGkBC,gBAHlB,iBAGkBA,gBAHlB;AAAA,MAGoCC,WAHpC,iBAGoCA,WAHpC;AAAA,MAGiDC,cAHjD,iBAGiDA,cAHjD;;AAAA,sBAIwBb,WAAW,CAAC,UAACI,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAJnC;AAAA,MAIPS,WAJO,iBAIPA,WAJO;AAAA,MAIMC,aAJN,iBAIMA,aAJN,EAMf;AACA;AAEA;AACA;;;AAIA,MAAID,WAAJ,EAAiB;AACbE,IAAAA,KAAK,CAAC,mBAAmBF,WAApB,CAAL;AACH;;AACD,MAAIC,aAAJ,EAAmB;AACfC,IAAAA,KAAK,CAAC,qBAAqBD,aAAtB,CAAL;AACH;;AAEDrB,EAAAA,SAAS,CAAC,YAAM;AACZ,aAASuB,QAAT,GAAoB;AAChB;AACA,UAAIC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,IAA0DF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAAtG,EAA2G;AACvG;AAEA,YAAIb,YAAY,IAAI,CAACC,gBAArB,EAAwC;AAAA;;AACpCa,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EADoC,CAEpC;;AACA,cAAMC,MAAM,iBAAGjB,SAAS,CAACA,SAAS,CAACkB,MAAV,GAAmB,CAApB,CAAZ,+CAAG,WAAiCC,EAAhD;AACArB,UAAAA,QAAQ,CAAC;AACLsB,YAAAA,IAAI,EAAE9B,kBADD;AAEL;AACA2B,YAAAA,MAAM,EAAEA,MAHH,CAGU;;AAHV,WAAD,CAAR;AAKH;AAEJ;AACJ;;AACDR,IAAAA,MAAM,CAACY,gBAAP,CAAwB,QAAxB,EAAkCb,QAAlC;AACA,WAAO,YAAM;AACTC,MAAAA,MAAM,CAACa,mBAAP,CAA2B,QAA3B,EAAqCd,QAArC;AACH,KAFD;AAGH,GAvBQ,EAuBN,CAACR,SAAD,EAAYC,YAAZ,EAA0BC,gBAA1B,CAvBM,CAAT;AAyBA,sBACI,MAAC,SAAD;AAAA,4BACI,KAAC,IAAD;AAAA,6BACI;AAAA;AAAA;AADJ,MADJ,EAIKL,EAAE,iBAAI,KAAC,QAAD,KAJX,EAKKG,SAAS,IAAIA,SAAS,CAACuB,GAAV,CAAc,UAACC,CAAD,EAAO;AAC/B,0BACI,KAAC,QAAD;AAAqB,QAAA,IAAI,EAAEA;AAA3B,SAAeA,CAAC,CAACL,EAAjB,CADJ;AAGH,KAJa,CALlB;AAAA,IADJ;AAcH,CA5DD;;;AAmFA,eAAezB,IAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport Head from \"next/head\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport wrapper from '../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport { notification } from \"antd\";\r\n\r\n\r\n\r\nconst Home = () => {\r\n    const { me } = useSelector((state) => state.user);\r\n    const dispatch = useDispatch();\r\n    const { mainPosts, hasMorePosts, loadPostsLoading, addPostDone, removePostDone } = useSelector((state) => state.post);\r\n    const { followError, unfollowError } = useSelector((state) => state.user);\r\n    \r\n    // useEffect(() => {\r\n    //     if (addPostDone){\r\n \r\n    //     }\r\n    // }, [addPostDone]);\r\n    \r\n\r\n\r\n    if (followError) {\r\n        alert(\"followError : \" + followError)\r\n    }\r\n    if (unfollowError) {\r\n        alert(\"unfollowError : \" + unfollowError)\r\n    }\r\n\r\n    useEffect(() => {\r\n        function onScroll() {\r\n            // console.log(window.scrollY + document.documentElement.clientHeight, document.documentElement.scrollHeight);\r\n            if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 300) {\r\n                // console.log(\"화면이 바닥에 도달했습니다.\");\r\n\r\n                if (hasMorePosts && !loadPostsLoading ) {\r\n                    console.log(\"화면이 바닥에 도달 + 포스팅 추가!!\");\r\n                    // mainPosts 배열의 개수 - 1이 마지막 요소의 인덱스 번호가 되므로 다음과 같이 indec 번호를 가져 온다.\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        // data: mainPosts[mainPosts.length - 1].id,\r\n                        lastId: lastId // 그냥 lastId만 써도 된다.\r\n                    });\r\n                }\r\n\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        }\r\n    }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            <Head>\r\n                <title>Home</title>\r\n            </Head>\r\n            {me && <PostForm />}\r\n            {mainPosts && mainPosts.map((c) => {\r\n                return (\r\n                    <PostCard key={c.id} post={c} />\r\n                );\r\n            })}\r\n\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n    console.log(context.req.headers);\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });\r\n\r\n    // 아래의 두줄은success 요청할때까지 기다리라는 뜻\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}