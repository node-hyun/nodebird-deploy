{"ast":null,"code":"import { all, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    console.log(\"saga action.data : \", action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data.text // 입력폼에 입력한 데이터가 여기까지 넘어옴\n\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  console.log(\"addComent action : \", action.data);\n\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    console.log(\"saga comment action.data : \", action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.log(\"댓글 에러 : \", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  console.log(\"data 확인 from saga : \", data); // return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts), fork(watchUploadImages)]);\n}","map":{"version":3,"sources":["C:/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","throttle","shortId","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","axios","post","addPost","action","id","generate","console","log","type","content","text","err","error","response","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","loadPostsAPI","get","loadPosts","uploadImagesAPI","uploadImages","result","call","watchLoadPosts","watchRemovePost","watchAddPost","watchAddComment","watchUploadImages","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\nimport shortId from 'shortid';\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    generateDummyPost,\r\n\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        console.log(\"saga action.data : \", action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data.text, // 입력폼에 입력한 데이터가 여기까지 넘어옴\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(removePostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\nfunction* addComment(action) {\r\n    console.log(\"addComent action : \", action.data);\r\n    try {\r\n        // const result = yield call(addCommentAPI, action.data);\r\n        console.log(\"saga comment action.data : \", action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(\"댓글 에러 : \", err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/api/posts', data);\r\n}\r\nfunction* loadPosts(action) {\r\n    try {\r\n        // const result = yield call(loadPostsAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: generateDummyPost(10),\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    console.log(\"data 확인 from saga : \", data);\r\n    // return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPosts),\r\n        fork(watchUploadImages),\r\n\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}