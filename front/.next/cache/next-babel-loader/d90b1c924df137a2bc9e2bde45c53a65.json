{"ast":null,"code":"import React, { useState, useCallback, useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport { Card, Avatar, List, Comment, Popover, Button, notification } from 'antd'; // 컴퍼넌트 임포트\n\nimport CommentForm from './CommentForm';\nimport PostImages from \"./PostImages\";\nimport PostCardContent from \"../components/PostCardContent\";\nimport FollowButton from './FollowButton';\nimport CommentRow from './CommentRow'; // 11 RETWEET_REQUEST 임포트 추가\n\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport Link from 'next/link';\nimport moment from 'moment';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    removePostLoading,\n    removePostDone\n  } = useSelector(state => state.post);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const id = me && me.id;\n  const liked = post.Likers.find(v => v.id === id); // useEffect(() => {\n  //     notification.open({\n  //         message: '알림',\n  //         description: \"게시글 삭제 성공 !!\"\n  //     })\n  // }, [removePostDone]);\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n    notification.open({\n      message: '알림',\n      description: \"포스팅 삭제 성공 !!\"\n    });\n  }, [removePostDone]);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]); // 33 리트윗 함수 추가\n\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Card, {\n      style: {\n        width: \"100%\",\n        marginBottom: \"10px\"\n      },\n      cover: post.Images[0] && /*#__PURE__*/_jsx(PostImages, {\n        images: post.Images\n      }),\n      actions: [\n      /*#__PURE__*/\n      // 22 버튼에 이벤트 걸기 <RetweetOutlined key=\"retweet\" />,\n      _jsx(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\"), liked ? /*#__PURE__*/_jsx(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onUnlike\n      }, \"heart\") : /*#__PURE__*/_jsx(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\"), /*#__PURE__*/_jsx(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"message\"), /*#__PURE__*/_jsx(Popover, {\n        content: /*#__PURE__*/_jsx(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Button, {\n              children: \"\\uC218\\uC815\"\n            }), /*#__PURE__*/_jsx(Button, {\n              type: \"danger\",\n              loading: removePostLoading,\n              onClick: onRemovePost,\n              children: \"\\uC0AD\\uC81C\"\n            })]\n          }) : /*#__PURE__*/_jsx(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          })\n        }),\n        children: /*#__PURE__*/_jsx(EllipsisOutlined, {})\n      }, \"ellipsis\")],\n      extra: /*#__PURE__*/_jsx(FollowButton, {\n        post: post\n      }),\n      title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n      children: post.RetweetId && post.Retweet ? /*#__PURE__*/_jsxs(Card, {\n        cover: post.Retweet.Images[0] && /*#__PURE__*/_jsx(PostImages, {\n          images: post.Retweet.Images\n        }),\n        children: [/*#__PURE__*/_jsx(\"span\", {\n          style: {\n            float: 'right'\n          },\n          children: moment(post.createdAt).format('YYYY.MM.DD.')\n        }), /*#__PURE__*/_jsx(Card.Meta, {\n          avatar: /*#__PURE__*/_jsx(Link, {\n            href: `/user/${post.Retweet.User.id}`,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(Avatar, {\n                children: post.Retweet.User.nickname[0]\n              })\n            })\n          }),\n          title: post.Retweet.User.nickname,\n          description: /*#__PURE__*/_jsx(PostCardContent, {\n            postData: post.Retweet.content\n          })\n        })]\n      }) : /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"span\", {\n          style: {\n            float: 'right'\n          },\n          children: moment(post.createdAt).format('YYYY.MM.DD.')\n        }), /*#__PURE__*/_jsx(Card.Meta, {\n          avatar: /*#__PURE__*/_jsx(Link, {\n            href: `/user/${post.User.id}`,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(Avatar, {\n                children: post.User.nickname[0]\n              })\n            })\n          }),\n          title: post.User.nickname,\n          description: /*#__PURE__*/_jsx(PostCardContent, {\n            postData: post.content\n          })\n        })]\n      })\n    }), commentFormOpened && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(CommentForm, {\n        post: post\n      }), /*#__PURE__*/_jsx(List, {\n        header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments || [],\n        renderItem: item => /*#__PURE__*/_jsx(\"li\", {\n          children: /*#__PURE__*/_jsx(CommentRow, {\n            comment: item,\n            PostId: post.id\n          })\n        })\n      })]\n    })]\n  });\n};\n\nexport default PostCard;","map":{"version":3,"sources":["C:/nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","useSelector","useDispatch","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","Card","Avatar","List","Comment","Popover","Button","notification","CommentForm","PostImages","PostCardContent","FollowButton","CommentRow","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","Link","moment","PostCard","post","dispatch","commentFormOpened","setCommentFormOpened","removePostLoading","removePostDone","state","me","user","id","liked","Likers","find","v","onToggleComment","prev","onRemovePost","type","data","open","message","description","onLike","alert","onUnlike","onRetweet","width","marginBottom","Images","User","RetweetId","nickname","Retweet","float","createdAt","format","content","Comments","length","item"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\r\nimport { Card, Avatar, List, Comment, Popover, Button, notification } from 'antd';\r\n// 컴퍼넌트 임포트\r\nimport CommentForm from './CommentForm';\r\nimport PostImages from \"./PostImages\";\r\nimport PostCardContent from \"../components/PostCardContent\";\r\nimport FollowButton from './FollowButton';\r\nimport CommentRow from './CommentRow';\r\n\r\n// 11 RETWEET_REQUEST 임포트 추가\r\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST  } from '../reducers/post';\r\nimport Link from 'next/link';\r\nimport moment from 'moment';\r\n\r\n\r\nconst PostCard = ({ post }) => {\r\n    const dispatch = useDispatch();\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const { removePostLoading , removePostDone } = useSelector((state) => state.post);\r\n    const { me } = useSelector((state) => state.user);\r\n    const id = me && me.id;\r\n    const liked = post.Likers.find((v) => v.id === id);\r\n\r\n    // useEffect(() => {\r\n    //     notification.open({\r\n    //         message: '알림',\r\n    //         description: \"게시글 삭제 성공 !!\"\r\n    //     })\r\n    // }, [removePostDone]);\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, []);\r\n\r\n    const onRemovePost = useCallback(() => {\r\n        dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n        notification.open({\r\n            message: '알림',\r\n            description: \"포스팅 삭제 성공 !!\"\r\n        })\r\n        \r\n    }, [removePostDone]);\r\n\r\n    const onLike = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: LIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [id]);\r\n\r\n    const onUnlike = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: UNLIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [id]);\r\n\r\n    // 33 리트윗 함수 추가\r\n    const onRetweet = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: RETWEET_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [id]);    \r\n\r\n    return (\r\n        <>\r\n            <Card\r\n                style={{ width: \"100%\" ,marginBottom:\"10px\" }}\r\n                cover={post.Images[0] && <PostImages images={post.Images} />}\r\n                actions={[\r\n\r\n                    // 22 버튼에 이벤트 걸기 <RetweetOutlined key=\"retweet\" />,\r\n                    <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n\r\n                    liked\r\n                        ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnlike} />\r\n                        : <HeartOutlined key=\"heart\" onClick={onLike} />,\r\n                    <MessageOutlined key=\"message\" onClick={onToggleComment} />,\r\n\r\n                    <Popover\r\n                        key=\"ellipsis\"\r\n                        content={(\r\n                            <Button.Group>\r\n                                {id && post.User.id === id\r\n                                    ? (\r\n                                        <>\r\n                                            <Button>수정</Button>\r\n                                            <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n                                        </>\r\n                                    )\r\n                                    : <Button>신고</Button>}\r\n                            </Button.Group>\r\n                        )}\r\n                    >\r\n                        <EllipsisOutlined />\r\n                    </Popover>,\r\n                    \r\n                ]}\r\n                extra={< FollowButton post={post} />}\r\n\r\n                title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n            >\r\n                {/* <Card.Meta\r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    description={<PostCardContent postData={post.content} />}\r\n                /> */}\r\n\r\n                {post.RetweetId && post.Retweet\r\n                    ? (\r\n                        <Card\r\n                            cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n                        >\r\n                            <span style={{ float: 'right' }}>{moment(post.createdAt).format('YYYY.MM.DD.')}</span>\r\n                            <Card.Meta\r\n                                avatar={<Link href={`/user/${post.Retweet.User.id}`}><a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a></Link>}\r\n                                title={post.Retweet.User.nickname}\r\n                                description={<PostCardContent postData={post.Retweet.content} />}\r\n                            />\r\n                        </Card>\r\n                    )\r\n                    : (\r\n                        <>\r\n                            <span style={{ float: 'right' }}>{moment(post.createdAt).format('YYYY.MM.DD.')}</span>\r\n                            <Card.Meta\r\n                                avatar={<Link href={`/user/${post.User.id}`}><a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\r\n                                title={post.User.nickname}\r\n                                description={<PostCardContent postData={post.content} />}\r\n                            />\r\n                        </>\r\n                    )}\r\n\r\n            </Card>\r\n\r\n            {commentFormOpened && ( \r\n                <>\r\n                    <CommentForm post={post} />\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <CommentRow comment={item} PostId = {post.id} />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostCard;\r\n\r\n"]},"metadata":{},"sourceType":"module"}