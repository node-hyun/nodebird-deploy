{"ast":null,"code":"var _jsxFileName = \"C:\\\\nodebird-deploy\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport { Card, Avatar, List, Comment, Popover, Button, notification, Modal } from 'antd'; // 컴퍼넌트 임포트\n\nimport CommentForm from './CommentForm';\nimport PostImages from \"./PostImages\";\nimport PostCardContent from \"../components/PostCardContent\";\nimport FollowButton from './FollowButton';\nimport CommentRow from './CommentRow'; // 11 RETWEET_REQUEST 임포트 추가\n\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport Link from 'next/link';\nimport moment from 'moment';\nimport user from \"../reducers/user\";\nimport PostEditModal from './modal/postEditModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    removePostLoading,\n    removePostDone\n  } = useSelector(state => state.post);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const id = me && me.id;\n  const liked = post.Likers.find(v => v.id === id);\n  const comments_count = post.Comments.length;\n  const {\n    0: isModalVisible,\n    1: setIsModalVisible\n  } = useState(false);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n    notification.open({\n      message: '알림',\n      description: \"포스팅 삭제 성공 !!\"\n    });\n  }, [removePostDone]);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]); // 33 리트윗 함수 추가\n\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        width: \"100%\",\n        marginBottom: \"10px\"\n      },\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 42\n      }, this),\n      actions: [\n      /*#__PURE__*/\n      // 22 버튼에 이벤트 걸기 <RetweetOutlined key=\"retweet\" />,\n      _jsxDEV(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onUnlike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 27\n      }, this),\n      /*#__PURE__*/\n      // <MessageOutlined key=\"message\" onClick={onToggleComment} />  ,\n      _jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(MessageOutlined, {\n          onClick: onToggleComment\n        }, \"message\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this), \" (\", post.Comments.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [post.retweetId && /*#__PURE__*/_jsxDEV(Button, {\n              onClick: showModal,\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 65\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              loading: removePostLoading,\n              onClick: onRemovePost,\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 29\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this)\n      }, \"ellipsis\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this)],\n      extra: me && me.id == post.User.id ? /*#__PURE__*/_jsxDEV(Button, {\n        children: \"\\uB0B4\\uAC00 \\uC4F4 \\uAE00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 54\n      }, this) : post.User.id && /*#__PURE__*/_jsxDEV(FollowButton, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 96\n      }, this),\n      title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n      children: post.RetweetId && post.Retweet ? /*#__PURE__*/_jsxDEV(Card, {\n        cover: post.Retweet.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n          images: post.Retweet.Images\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 62\n        }, this),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            float: 'right'\n          },\n          children: moment(post.createdAt).format('YYYY.MM.DD.')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Card.Meta, {\n          avatar: /*#__PURE__*/_jsxDEV(Link, {\n            href: `/user/${post.Retweet.User.id}`,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                children: post.Retweet.User.nickname[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 89\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 86\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 41\n          }, this),\n          title: post.Retweet.User.nickname,\n          description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n            postData: post.Retweet.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 46\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            float: 'right'\n          },\n          children: moment(post.createdAt).format('YYYY.MM.DD.')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Card.Meta, {\n          avatar: /*#__PURE__*/_jsxDEV(Link, {\n            href: `/user/${post.User.id}`,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                children: post.User.nickname[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 81\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 78\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 41\n          }, this),\n          title: post.User.nickname,\n          description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n            postData: post.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 46\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), commentFormOpened && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments || [],\n        renderItem: item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(CommentRow, {\n            comment: item,\n            PostId: post.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Basic Modal\",\n      visible: isModalVisible,\n      onOk: handleOk,\n      onCancel: handleCancel,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Some contents...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Some contents...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Some contents...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\nexport default PostCard;","map":{"version":3,"sources":["C:/nodebird-deploy/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","useSelector","useDispatch","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","Card","Avatar","List","Comment","Popover","Button","notification","Modal","CommentForm","PostImages","PostCardContent","FollowButton","CommentRow","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","Link","moment","user","PostEditModal","PostCard","post","dispatch","commentFormOpened","setCommentFormOpened","removePostLoading","removePostDone","state","me","id","liked","Likers","find","v","comments_count","Comments","length","isModalVisible","setIsModalVisible","showModal","handleOk","handleCancel","onToggleComment","prev","onRemovePost","type","data","open","message","description","onLike","alert","onUnlike","onRetweet","width","marginBottom","Images","User","retweetId","RetweetId","nickname","Retweet","float","createdAt","format","content","item"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\r\nimport { Card, Avatar, List, Comment, Popover, Button, notification, Modal } from 'antd';\r\n// 컴퍼넌트 임포트\r\nimport CommentForm from './CommentForm';\r\nimport PostImages from \"./PostImages\";\r\nimport PostCardContent from \"../components/PostCardContent\";\r\nimport FollowButton from './FollowButton';\r\nimport CommentRow from './CommentRow';\r\n\r\n// 11 RETWEET_REQUEST 임포트 추가\r\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\nimport Link from 'next/link';\r\nimport moment from 'moment';\r\nimport user from \"../reducers/user\";\r\nimport PostEditModal from './modal/postEditModal'\r\n\r\n\r\nconst PostCard = ({ post }) => {\r\n    const dispatch = useDispatch();\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const { removePostLoading, removePostDone } = useSelector((state) => state.post);\r\n    const { me } = useSelector((state) => state.user);\r\n    const id = me && me.id;\r\n    const liked = post.Likers.find((v) => v.id === id);\r\n    const comments_count = post.Comments.length;\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, []);\r\n\r\n    const onRemovePost = useCallback(() => {\r\n        dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n        notification.open({\r\n            message: '알림',\r\n            description: \"포스팅 삭제 성공 !!\"\r\n        })\r\n\r\n    }, [removePostDone]);\r\n\r\n    const onLike = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: LIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [id]);\r\n\r\n    const onUnlike = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: UNLIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [id]);\r\n\r\n    // 33 리트윗 함수 추가\r\n    const onRetweet = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: RETWEET_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [id]);\r\n\r\n    return (\r\n        <>\r\n            <Card\r\n                style={{ width: \"100%\", marginBottom: \"10px\" }}\r\n                cover={post.Images[0] && <PostImages images={post.Images} />}\r\n                actions={[\r\n\r\n                    // 22 버튼에 이벤트 걸기 <RetweetOutlined key=\"retweet\" />,\r\n                    <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n\r\n                    liked\r\n                        ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnlike} />\r\n                        : <HeartOutlined key=\"heart\" onClick={onLike} />,\r\n                    // <MessageOutlined key=\"message\" onClick={onToggleComment} />  ,\r\n                    <span>\r\n                        <MessageOutlined key=\"message\" onClick={onToggleComment} /> ({post.Comments.length})\r\n                    </span>,\r\n                    \r\n                    <Popover\r\n                        key=\"ellipsis\"\r\n                        content={(\r\n                            <Button.Group>\r\n                                {id && post.User.id === id\r\n                                    ? (\r\n                                        <>\r\n                                            { post.retweetId && <Button onClick={showModal}>수정</Button> }\r\n                                            <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n                                        </>\r\n                                    )\r\n                                    : <Button>신고</Button>}\r\n                            </Button.Group>\r\n                        )}\r\n                    >\r\n                        <EllipsisOutlined />\r\n                    </Popover>,\r\n\r\n                ]}\r\n                extra={me && me.id == post.User.id ? <Button>내가 쓴 글</Button> : post.User.id && < FollowButton post={post} /> }\r\n\r\n                title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n            >\r\n                {/* <Card.Meta\r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    description={<PostCardContent postData={post.content} />}\r\n                /> */}\r\n\r\n                {post.RetweetId && post.Retweet\r\n                    ? (\r\n                        <Card\r\n                            cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n                        >\r\n                            <span style={{ float: 'right' }}>{moment(post.createdAt).format('YYYY.MM.DD.')}</span>\r\n                            <Card.Meta\r\n                                avatar={<Link href={`/user/${post.Retweet.User.id}`}><a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a></Link>}\r\n                                title={post.Retweet.User.nickname}\r\n                                description={<PostCardContent postData={post.Retweet.content} />}\r\n                            />\r\n                        </Card>\r\n                    )\r\n                    : (\r\n                        <>\r\n                            <span style={{ float: 'right' }}>{moment(post.createdAt).format('YYYY.MM.DD.')}</span>\r\n                            <Card.Meta\r\n                                avatar={<Link href={`/user/${post.User.id}`}><a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\r\n                                title={post.User.nickname}\r\n                                description={<PostCardContent postData={post.content} />}\r\n                            />\r\n                        </>\r\n                    )}\r\n\r\n            </Card>\r\n\r\n            {commentFormOpened && (\r\n                <>\r\n                    <CommentForm post={post} />\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <CommentRow comment={item} PostId={post.id} />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n\r\n\r\n            <Modal title=\"Basic Modal\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                <p>Some contents...</p>\r\n                <p>Some contents...</p>\r\n                <p>Some contents...</p>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostCard;\r\n\r\n"]},"metadata":{},"sourceType":"module"}