{"ast":null,"code":"import { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios'; // import shortId from 'shortid';\n\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, SEARCH_POSTS_REQUEST, SEARCH_POSTS_SUCCESS, SEARCH_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, DELETE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; // add your api 1122\n\nfunction SearchPostsAPI(searchWord) {\n  console.log('searh word at SearchPostsAPI', searchWord);\n  return axios.get(`/post/search/${searchWord}/`);\n}\n\nfunction* searchPosts(action) {\n  try {\n    // const result = yield call(SearchPostsAPI, action.data);\n    const result = yield call(SearchPostsAPI, action.lastId);\n    console.log(\"result for SearchPostsAPI : \", result);\n    console.log(\"result for SearchPostsAPI : \", result.data.length);\n    yield put({\n      type: SEARCH_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SEARCH_POSTS_FAILER,\n      data: err.response.data\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  // console.log(\"data for posting at saga : \", data);\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"result for posting : \", result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  // return axios.delete('/api/post', data);\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(removePostAPI, action.data);\n    console.log(\"result from backend, postId 확인 하기 : \", result.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      // data: action.data,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      // data: action.data,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  console.log(\"data from saga for add comment : \", data);\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  console.log(\"addComent action : \", action.data);\n\n  try {\n    // yield delay(1000);\n    const result = yield call(addCommentAPI, action.data);\n    console.log(\"result(response from backend from insert comment): \", result);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(\"댓글 에러 : \", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  // return axios.get('/posts', data);\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    const result = yield call(loadPostsAPI, action.lastId);\n    console.log(\"result for loadPostsAPI : \", result);\n    console.log(\"result for loadPostsAPI : \", result.data.length);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      // data: generateDummyPost(10),\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  console.log(\"data 확인 from saga : \", data);\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction deleteCommentAPI(data) {\n  console.log(\"data 확인 from saga : \", data);\n  return axios.delete(`post/comment/${data.PostId}/${data.CommentId}`);\n}\n\nfunction* deleteComment(action) {\n  try {\n    const result = yield call(deleteCommentAPI, action.data);\n    console.log(\"삭제에 대한 응답 : \", result.data);\n    yield put({\n      type: DELETE_COMMENT_SUCCESS,\n      // 라우터에서 댓글 삭제한뒤 PostId와 CommentId 리턴 \n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: DELETE_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchDeleteComment() {\n  yield takeLatest(DELETE_COMMENT_REQUEST, deleteComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchSearchPosts() {\n  yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts), fork(watchUploadImages), fork(watchDeleteComment), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchSearchPosts)]);\n}","map":{"version":3,"sources":["C:/nodebird/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","throttle","call","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","SEARCH_POSTS_REQUEST","SEARCH_POSTS_SUCCESS","SEARCH_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","SearchPostsAPI","searchWord","console","log","get","searchPosts","action","result","lastId","data","length","type","err","error","SEARCH_POSTS_FAILER","response","retweetAPI","post","retweet","addPostAPI","addPost","id","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","loadPostsAPI","loadPosts","uploadImagesAPI","uploadImages","deleteCommentAPI","PostId","CommentId","deleteComment","likePostAPI","patch","likePost","unlikePostAPI","unlikePost","watchLoadPosts","watchRemovePost","watchAddPost","watchAddComment","watchUploadImages","watchDeleteComment","watchLikePost","watchUnlikePost","watchRetweet","watchSearchPosts","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n// import shortId from 'shortid';\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n\r\n    SEARCH_POSTS_REQUEST,\r\n    SEARCH_POSTS_SUCCESS,\r\n    SEARCH_POSTS_FAILURE,\r\n\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n\r\n    DELETE_COMMENT_REQUEST,\r\n    DELETE_COMMENT_SUCCESS,\r\n    DELETE_COMMENT_FAILURE,\r\n\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    RETWEET_FAILURE,\r\n\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n// add your api 1122\r\n\r\nfunction SearchPostsAPI(searchWord) {\r\n    console.log('searh word at SearchPostsAPI', searchWord);\r\n    return axios.get(`/post/search/${searchWord}/`);\r\n\r\n}\r\n\r\nfunction* searchPosts(action) {\r\n    try {\r\n        // const result = yield call(SearchPostsAPI, action.data);\r\n        const result = yield call(SearchPostsAPI, action.lastId);\r\n        console.log(\"result for SearchPostsAPI : \", result);\r\n        console.log(\"result for SearchPostsAPI : \", result.data.length);\r\n\r\n        yield put({\r\n            type: SEARCH_POSTS_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: SEARCH_POSTS_FAILER ,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    // console.log(\"data for posting at saga : \", data);\r\n    return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log(\"result for posting : \", result);\r\n\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    // return axios.delete('/api/post', data);\r\n    return axios.delete(`/post/${data}`);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(removePostAPI, action.data);\r\n        console.log(\"result from backend, postId 확인 하기 : \", result.data);\r\n\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            // data: action.data,\r\n            data: result.data,\r\n        });\r\n\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            // data: action.data,\r\n            data: result.data,\r\n        });\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    console.log(\"data from saga for add comment : \", data);\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    console.log(\"addComent action : \", action.data);\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log(\"result(response from backend from insert comment): \", result);\r\n\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(\"댓글 에러 : \", err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    // return axios.get('/posts', data);\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n\r\n}\r\nfunction* loadPosts(action) {\r\n    try {\r\n        // const result = yield call(loadPostsAPI, action.data);\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        console.log(\"result for loadPostsAPI : \", result);\r\n        console.log(\"result for loadPostsAPI : \", result.data.length);\r\n\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            // data: generateDummyPost(10),\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    console.log(\"data 확인 from saga : \", data);\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction deleteCommentAPI(data) {\r\n    console.log(\"data 확인 from saga : \", data);\r\n    return axios.delete(`post/comment/${data.PostId}/${data.CommentId}`);\r\n}\r\n\r\nfunction* deleteComment(action) {\r\n    try {\r\n        const result = yield call(deleteCommentAPI, action.data);\r\n        console.log(\"삭제에 대한 응답 : \", result.data);\r\n\r\n        yield put({\r\n            type: DELETE_COMMENT_SUCCESS,\r\n            // 라우터에서 댓글 삭제한뒤 PostId와 CommentId 리턴 \r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: DELETE_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchDeleteComment() {\r\n    yield takeLatest(DELETE_COMMENT_REQUEST, deleteComment);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchSearchPosts() {\r\n    yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPosts),\r\n        fork(watchUploadImages),\r\n        fork(watchDeleteComment),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n        fork(watchSearchPosts),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}