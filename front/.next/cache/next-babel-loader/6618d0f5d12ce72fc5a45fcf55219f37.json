{"ast":null,"code":"import { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios'; // import shortId from 'shortid';\n\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, DELETE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, SEARCH_POSTS_REQUEST, SEARCH_POSTS_SUCCESS, SEARCH_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; // add your api 1122\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${data}${lastid || 0}`);\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction SearchPostsAPI(data) {\n  console.log('data : ', data);\n  return axios.get(`/search/posts/${data.search_word}/${data.lastId || 0}?`);\n}\n\nfunction* searchPosts(action) {\n  try {\n    console.log(\"action.data : \", action.data);\n    const result = yield call(SearchPostsAPI, action.data);\n    console.log(\"result for SearchPostsAPI : \", result);\n    console.log(\"result for SearchPostsAPI : \", result.data.length);\n    yield put({\n      type: SEARCH_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(\"error : \", err);\n    console.error(err);\n    yield put({\n      type: SEARCH_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  // console.log(\"data for posting at saga : \", data);\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"result for posting : \", result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  // return axios.delete('/api/post', data);\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    // yield delay(1000);\n    const result = yield call(removePostAPI, action.data);\n    console.log(\"result from backend, postId 확인 하기 : \", result.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      // data: action.data,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      // data: action.data,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  console.log(\"data from saga for add comment : \", data);\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  console.log(\"addComent action : \", action.data);\n\n  try {\n    // yield delay(1000);\n    const result = yield call(addCommentAPI, action.data);\n    console.log(\"result(response from backend from insert comment): \", result);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(\"댓글 에러 : \", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  // return axios.get('/posts', data);\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    console.log(\"result for loadPostsAPI : \", result);\n    console.log(\"result for loadPostsAPI : \", result.data.length);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  console.log(\"data 확인 from saga : \", data);\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction deleteCommentAPI(data) {\n  console.log(\"data 확인 from saga : \", data);\n  return axios.delete(`post/comment/${data.PostId}/${data.CommentId}`);\n}\n\nfunction* deleteComment(action) {\n  try {\n    const result = yield call(deleteCommentAPI, action.data);\n    console.log(\"삭제에 대한 응답 : \", result.data);\n    yield put({\n      type: DELETE_COMMENT_SUCCESS,\n      // 라우터에서 댓글 삭제한뒤 PostId와 CommentId 리턴 \n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: DELETE_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchDeleteComment() {\n  yield takeLatest(DELETE_COMMENT_REQUEST, deleteComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchSearchPosts() {\n  yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts), fork(watchUploadImages), fork(watchDeleteComment), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchSearchPosts), fork(watchLoadHashtagPosts)]);\n}","map":{"version":3,"sources":["C:/nodebird/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","throttle","call","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","SEARCH_POSTS_REQUEST","SEARCH_POSTS_SUCCESS","SEARCH_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadHashtagPostsAPI","data","lastId","get","lastid","encodeURIComponent","loadHashtagPosts","action","result","type","err","console","error","LOAD_HASHTAG_POSTS_FAILURE","response","SearchPostsAPI","log","search_word","searchPosts","length","retweetAPI","post","retweet","addPostAPI","addPost","id","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","loadPostsAPI","loadPosts","uploadImagesAPI","uploadImages","deleteCommentAPI","PostId","CommentId","deleteComment","likePostAPI","patch","likePost","unlikePostAPI","unlikePost","watchLoadPosts","watchRemovePost","watchAddPost","watchAddComment","watchUploadImages","watchDeleteComment","watchLikePost","watchUnlikePost","watchRetweet","watchSearchPosts","watchLoadHashtagPosts","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n// import shortId from 'shortid';\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n\r\n    DELETE_COMMENT_REQUEST,\r\n    DELETE_COMMENT_SUCCESS,\r\n    DELETE_COMMENT_FAILURE,\r\n\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    RETWEET_FAILURE,\r\n\r\n    SEARCH_POSTS_REQUEST,\r\n    SEARCH_POSTS_SUCCESS,\r\n    SEARCH_POSTS_FAILURE,\r\n\r\n    LOAD_HASHTAG_POSTS_REQUEST,\r\n    LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_POST_FAILURE,  \r\n\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n// add your api 1122\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n    return axios.get(`/hashtag/${data}${lastid || 0}`);\r\n    return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction SearchPostsAPI(data) {\r\n    console.log('data : ', data);\r\n    return axios.get(`/search/posts/${data.search_word}/${data.lastId || 0}?`);\r\n}\r\n\r\nfunction* searchPosts(action) {\r\n    try {\r\n        console.log(\"action.data : \", action.data);\r\n        const result = yield call(SearchPostsAPI, action.data);\r\n        console.log(\"result for SearchPostsAPI : \", result);\r\n        console.log(\"result for SearchPostsAPI : \", result.data.length);\r\n\r\n        yield put({\r\n            type: SEARCH_POSTS_SUCCESS,\r\n            data: result.data\r\n        });\r\n\r\n    } catch (err) {\r\n        console.log(\"error : \", err);\r\n        console.error(err);\r\n        yield put({\r\n            type: SEARCH_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    // console.log(\"data for posting at saga : \", data);\r\n    return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log(\"result for posting : \", result);\r\n\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    // return axios.delete('/api/post', data);\r\n    return axios.delete(`/post/${data}`);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(removePostAPI, action.data);\r\n        console.log(\"result from backend, postId 확인 하기 : \", result.data);\r\n\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            // data: action.data,\r\n            data: result.data,\r\n        });\r\n\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            // data: action.data,\r\n            data: result.data,\r\n        });\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    console.log(\"data from saga for add comment : \", data);\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    console.log(\"addComent action : \", action.data);\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log(\"result(response from backend from insert comment): \", result);\r\n\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(\"댓글 에러 : \", err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    // return axios.get('/posts', data);\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n\r\n}\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        console.log(\"result for loadPostsAPI : \", result);\r\n        console.log(\"result for loadPostsAPI : \", result.data.length);\r\n\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    console.log(\"data 확인 from saga : \", data);\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction deleteCommentAPI(data) {\r\n    console.log(\"data 확인 from saga : \", data);\r\n    return axios.delete(`post/comment/${data.PostId}/${data.CommentId}`);\r\n}\r\n\r\nfunction* deleteComment(action) {\r\n    try {\r\n        const result = yield call(deleteCommentAPI, action.data);\r\n        console.log(\"삭제에 대한 응답 : \", result.data);\r\n\r\n        yield put({\r\n            type: DELETE_COMMENT_SUCCESS,\r\n            // 라우터에서 댓글 삭제한뒤 PostId와 CommentId 리턴 \r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: DELETE_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchDeleteComment() {\r\n    yield takeLatest(DELETE_COMMENT_REQUEST, deleteComment);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchSearchPosts() {\r\n    yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPosts),\r\n        fork(watchUploadImages),\r\n        fork(watchDeleteComment),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n        fork(watchSearchPosts),\r\n        fork(watchLoadHashtagPosts),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}