{"ast":null,"code":"import React, { useState, useCallback, useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport { Card, Avatar, List, Comment, Popover, Button, notification } from 'antd'; // 컴퍼넌트 임포트\n\nimport CommentForm from './CommentForm';\nimport PostImages from \"./PostImages\";\nimport PostCardContent from \"../components/PostCardContent\";\nimport FollowButton from './FollowButton';\nimport CommentRow from './CommentRow'; // 11 RETWEET_REQUEST 임포트 추가\n\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport Link from 'next/link';\nimport moment from 'moment';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    removePostLoading,\n    removePostDone\n  } = useSelector(state => state.post);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const id = me && me.id;\n  const liked = post.Likers.find(v => v.id === id); // useEffect(() => {\n  //     notification.open({\n  //         message: '알림',\n  //         description: \"게시글 삭제 성공 !!\"\n  //     })\n  // }, [removePostDone]);\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n    notification.open({\n      message: '알림',\n      description: \"포스팅 삭제 성공 !!\"\n    });\n  }, [removePostDone]);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]); // 33 리트윗 함수 추가\n\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Card, {\n      style: {\n        width: \"100%\",\n        marginBottom: \"10px\"\n      },\n      cover: post.Images[0] && /*#__PURE__*/_jsx(PostImages, {\n        images: post.Images\n      }),\n      actions: [\n      /*#__PURE__*/\n      // 22 버튼에 이벤트 걸기 <RetweetOutlined key=\"retweet\" />,\n      _jsx(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\"), liked ? /*#__PURE__*/_jsx(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onUnlike\n      }, \"heart\") : /*#__PURE__*/_jsx(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\"), /*#__PURE__*/_jsx(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"message\"), /*#__PURE__*/_jsx(Popover, {\n        content: /*#__PURE__*/_jsx(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Button, {\n              children: \"\\uC218\\uC815\"\n            }), /*#__PURE__*/_jsx(Button, {\n              type: \"danger\",\n              loading: removePostLoading,\n              onClick: onRemovePost,\n              children: \"\\uC0AD\\uC81C\"\n            })]\n          }) : /*#__PURE__*/_jsx(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          })\n        }),\n        children: /*#__PURE__*/_jsx(EllipsisOutlined, {})\n      }, \"ellipsis\")],\n      extra: /*#__PURE__*/_jsx(FollowButton, {\n        post: post\n      }),\n      title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n      children: post.RetweetId && post.Retweet ? /*#__PURE__*/_jsxs(Card, {\n        cover: post.Retweet.Images[0] && /*#__PURE__*/_jsx(PostImages, {\n          images: post.Retweet.Images\n        }),\n        children: [/*#__PURE__*/_jsx(\"span\", {\n          style: {\n            float: 'right'\n          },\n          children: moment(post.createdAt).format('YYYY.MM.DD.')\n        }), /*#__PURE__*/_jsx(Card.Meta, {\n          avatar: /*#__PURE__*/_jsx(Link, {\n            href: `/user/${post.Retweet.User.id}`,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(Avatar, {\n                children: post.Retweet.User.nickname[0]\n              })\n            })\n          }),\n          title: post.Retweet.User.nickname,\n          description: /*#__PURE__*/_jsx(PostCardContent, {\n            postData: post.Retweet.content\n          })\n        })]\n      }) : /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"span\", {\n          style: {\n            float: 'right'\n          },\n          children: moment(post.createdAt).format('YYYY.MM.DD.')\n        }), /*#__PURE__*/_jsx(Card.Meta, {\n          avatar: /*#__PURE__*/_jsx(Link, {\n            href: `/user/${post.User.id}`,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(Avatar, {\n                children: post.User.nickname[0]\n              })\n            })\n          }),\n          title: post.User.nickname,\n          description: /*#__PURE__*/_jsx(PostCardContent, {\n            postData: post.content\n          })\n        })]\n      })\n    }), commentFormOpened && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(CommentForm, {\n        post: post\n      }), /*#__PURE__*/_jsx(List, {\n        header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments || [],\n        renderItem: item => /*#__PURE__*/_jsx(\"li\", {\n          children: /*#__PURE__*/_jsx(CommentRow, {\n            comment: item,\n            PostId: post.id\n          })\n        })\n      })]\n    })]\n  });\n};\n\nexport default PostCard;","map":null,"metadata":{},"sourceType":"module"}