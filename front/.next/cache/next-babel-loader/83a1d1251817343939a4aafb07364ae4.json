{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(updatePost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(searchPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(deleteComment),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(watchDeleteComment),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(watchSearchPosts),\n    _marked24 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked25 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked26 = /*#__PURE__*/_regeneratorRuntime.mark(watchUpdatePost),\n    _marked27 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios'; // import shortId from 'shortid';\n\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, DELETE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, SEARCH_POSTS_REQUEST, SEARCH_POSTS_SUCCESS, SEARCH_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, UPDATE_POST_FAILEURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; // add your api 1122\n\nfunction updatePostAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/update\"), data);\n}\n\nfunction updatePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function updatePost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(updatePostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(\"result for update post : \", result);\n          _context.next = 7;\n          return put({\n            type: UPDATE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(\"/user/\".concat(data, \"/posts?lastId=\").concat(lastId || 0));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loadUserPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  // return axios.get(`/hashtag/${data}?lastId=${lastid || 0}`);\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(data), \"?lastId=\").concat(lastId || 0));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction SearchPostsAPI(data) {\n  console.log('data : ', data);\n  return axios.get(\"/search/posts/\".concat(data.search_word, \"/\").concat(data.lastId || 0, \"?\"));\n}\n\n_c = SearchPostsAPI;\n\nfunction searchPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function searchPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          console.log(\"action.data : \", action.data);\n          _context4.next = 4;\n          return call(SearchPostsAPI, action.data);\n\n        case 4:\n          result = _context4.sent;\n          console.log(\"result for SearchPostsAPI : \", result);\n          console.log(\"result for SearchPostsAPI : \", result.data.length);\n          _context4.next = 9;\n          return put({\n            type: SEARCH_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 9:\n          _context4.next = 17;\n          break;\n\n        case 11:\n          _context4.prev = 11;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(\"error : \", _context4.t0);\n          console.error(_context4.t0);\n          _context4.next = 17;\n          return put({\n            type: SEARCH_POSTS_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 17:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 11]]);\n}\n\nfunction retweetAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction addPostAPI(data) {\n  // console.log(\"data for posting at saga : \", data);\n  return axios.post('/post', data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          console.log(\"result for posting : \", result);\n          _context6.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context6.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 9:\n          _context6.next = 16;\n          break;\n\n        case 11:\n          _context6.prev = 11;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 16;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context6.t0.response.data\n          });\n\n        case 16:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 11]]);\n}\n\nfunction removePostAPI(data) {\n  // return axios.delete('/api/post', data);\n  return axios[\"delete\"](\"/post/\".concat(data));\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          console.log(\"result from backend, postId 확인 하기 : \", result.data);\n          _context7.next = 7;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            // data: action.data,\n            data: result.data\n          });\n\n        case 7:\n          _context7.next = 9;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            // data: action.data,\n            data: result.data\n          });\n\n        case 9:\n          _context7.next = 16;\n          break;\n\n        case 11:\n          _context7.prev = 11;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 16;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context7.t0.response.data\n          });\n\n        case 16:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 11]]);\n}\n\nfunction addCommentAPI(data) {\n  console.log(\"data from saga for add comment : \", data);\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          console.log(\"addComent action : \", action.data);\n          _context8.prev = 1;\n          _context8.next = 4;\n          return call(addCommentAPI, action.data);\n\n        case 4:\n          result = _context8.sent;\n          console.log(\"result(response from backend from insert comment): \", result);\n          _context8.next = 8;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context8.next = 15;\n          break;\n\n        case 10:\n          _context8.prev = 10;\n          _context8.t0 = _context8[\"catch\"](1);\n          console.log(\"댓글 에러 : \", _context8.t0);\n          _context8.next = 15;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context8.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[1, 10]]);\n}\n\nfunction loadPostsAPI(lastId) {\n  // return axios.get('/posts', data);\n  return axios.get(\"/posts?lastId=\".concat(lastId || 0));\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(loadPostsAPI, action.lastId);\n\n        case 3:\n          result = _context9.sent;\n          console.log(\"result for loadPostsAPI : \", result);\n          console.log(\"result for loadPostsAPI : \", result.data.length);\n          _context9.next = 8;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context9.next = 15;\n          break;\n\n        case 10:\n          _context9.prev = 10;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 15;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context9.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 10]]);\n}\n\nfunction uploadImagesAPI(data) {\n  console.log(\"data 확인 from saga : \", data);\n  return axios.post('/post/images', data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          _context10.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context10.sent;\n          _context10.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context10.next = 13;\n          break;\n\n        case 8:\n          _context10.prev = 8;\n          _context10.t0 = _context10[\"catch\"](0);\n          console.error(_context10.t0);\n          _context10.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context10.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 8]]);\n}\n\nfunction deleteCommentAPI(data) {\n  console.log(\"data 확인 from saga : \", data);\n  return axios[\"delete\"](\"post/comment/\".concat(data.PostId, \"/\").concat(data.CommentId));\n}\n\nfunction deleteComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function deleteComment$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(deleteCommentAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          console.log(\"삭제에 대한 응답 : \", result.data);\n          _context11.next = 7;\n          return put({\n            type: DELETE_COMMENT_SUCCESS,\n            // 라우터에서 댓글 삭제한뒤 PostId와 CommentId 리턴 \n            data: result.data\n          });\n\n        case 7:\n          _context11.next = 14;\n          break;\n\n        case 9:\n          _context11.prev = 9;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 14;\n          return put({\n            type: DELETE_COMMENT_FAILURE,\n            error: _context11.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 9]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.prev = 0;\n          _context12.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context12.sent;\n          _context12.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context12.next = 13;\n          break;\n\n        case 8:\n          _context12.prev = 8;\n          _context12.t0 = _context12[\"catch\"](0);\n          console.error(_context12.t0);\n          _context12.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context12.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context13.next = 13;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.error(_context13.t0);\n          _context13.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context13.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction watchDeleteComment() {\n  return _regeneratorRuntime.wrap(function watchDeleteComment$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return takeLatest(DELETE_COMMENT_REQUEST, deleteComment);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nfunction watchSearchPosts() {\n  return _regeneratorRuntime.wrap(function watchSearchPosts$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.next = 2;\n          return takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\n\n        case 2:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          _context24.next = 2;\n          return throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, _marked24);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context25) {\n    while (1) {\n      switch (_context25.prev = _context25.next) {\n        case 0:\n          _context25.next = 2;\n          return throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context25.stop();\n      }\n    }\n  }, _marked25);\n}\n\nfunction watchUpdatePost() {\n  return _regeneratorRuntime.wrap(function watchUpdatePost$(_context26) {\n    while (1) {\n      switch (_context26.prev = _context26.next) {\n        case 0:\n          _context26.next = 2;\n          return throttle(5000, UPDATE_POST_REQUEST, updatePost);\n\n        case 2:\n        case \"end\":\n          return _context26.stop();\n      }\n    }\n  }, _marked26);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context27) {\n    while (1) {\n      switch (_context27.prev = _context27.next) {\n        case 0:\n          _context27.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts), fork(watchUploadImages), fork(watchDeleteComment), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchSearchPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUpdatePost)]);\n\n        case 2:\n        case \"end\":\n          return _context27.stop();\n      }\n    }\n  }, _marked27);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchPostsAPI\");","map":{"version":3,"sources":["C:/nodebird-deploy/front/sagas/post.js"],"names":["updatePost","loadUserPosts","loadHashtagPosts","searchPosts","retweet","addPost","removePost","addComment","loadPosts","uploadImages","deleteComment","likePost","unlikePost","watchLoadPosts","watchRemovePost","watchAddPost","watchAddComment","watchUploadImages","watchDeleteComment","watchLikePost","watchUnlikePost","watchRetweet","watchSearchPosts","watchLoadHashtagPosts","watchLoadUserPosts","watchUpdatePost","postSaga","all","delay","fork","put","takeLatest","throttle","call","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","SEARCH_POSTS_REQUEST","SEARCH_POSTS_SUCCESS","SEARCH_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILEURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","updatePostAPI","data","post","postId","action","result","console","log","type","error","response","loadUserPostsAPI","lastId","get","loadHashtagPostsAPI","encodeURIComponent","SearchPostsAPI","search_word","length","retweetAPI","addPostAPI","id","removePostAPI","addCommentAPI","loadPostsAPI","uploadImagesAPI","deleteCommentAPI","PostId","CommentId","likePostAPI","patch","unlikePostAPI"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n// import shortId from 'shortid';\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n\r\n    DELETE_COMMENT_REQUEST,\r\n    DELETE_COMMENT_SUCCESS,\r\n    DELETE_COMMENT_FAILURE,\r\n\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    RETWEET_FAILURE,\r\n\r\n    SEARCH_POSTS_REQUEST,\r\n    SEARCH_POSTS_SUCCESS,\r\n    SEARCH_POSTS_FAILURE,\r\n\r\n    LOAD_HASHTAG_POSTS_REQUEST,\r\n    LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_FAILURE,  \r\n\r\n    LOAD_USER_POSTS_REQUEST,\r\n    LOAD_USER_POSTS_SUCCESS,\r\n    LOAD_USER_POSTS_FAILURE,\r\n\r\n    UPDATE_POST_REQUEST,\r\n    UPDATE_POST_SUCCESS,\r\n    UPDATE_POST_FAILEURE,\r\n\r\n\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\n// add your api 1122\r\nfunction updatePostAPI(data) {\r\n    return axios.post(`/post/${data.postId}/update`, data);\r\n}\r\n\r\nfunction* updatePost(action) {\r\n    try {\r\n        const result = yield call(updatePostAPI, action.data);\r\n        console.log(\"result for update post : \", result);\r\n\r\n        yield put({\r\n            type: UPDATE_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction loadUserPostsAPI(data, lastId) {\r\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n    // return axios.get(`/hashtag/${data}?lastId=${lastid || 0}`);\r\n    return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction SearchPostsAPI(data) {\r\n    console.log('data : ', data);\r\n    return axios.get(`/search/posts/${data.search_word}/${data.lastId || 0}?`);\r\n}\r\n\r\nfunction* searchPosts(action) {\r\n    try {\r\n        console.log(\"action.data : \", action.data);\r\n        const result = yield call(SearchPostsAPI, action.data);\r\n        console.log(\"result for SearchPostsAPI : \", result);\r\n        console.log(\"result for SearchPostsAPI : \", result.data.length);\r\n\r\n        yield put({\r\n            type: SEARCH_POSTS_SUCCESS,\r\n            data: result.data\r\n        });\r\n\r\n    } catch (err) {\r\n        console.log(\"error : \", err);\r\n        console.error(err);\r\n        yield put({\r\n            type: SEARCH_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    // console.log(\"data for posting at saga : \", data);\r\n    return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log(\"result for posting : \", result);\r\n\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    // return axios.delete('/api/post', data);\r\n    return axios.delete(`/post/${data}`);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(removePostAPI, action.data);\r\n        console.log(\"result from backend, postId 확인 하기 : \", result.data);\r\n\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            // data: action.data,\r\n            data: result.data,\r\n        });\r\n\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            // data: action.data,\r\n            data: result.data,\r\n        });\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    console.log(\"data from saga for add comment : \", data);\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    console.log(\"addComent action : \", action.data);\r\n    try {\r\n        // yield delay(1000);\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log(\"result(response from backend from insert comment): \", result);\r\n\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(\"댓글 에러 : \", err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    // return axios.get('/posts', data);\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n\r\n}\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        console.log(\"result for loadPostsAPI : \", result);\r\n        console.log(\"result for loadPostsAPI : \", result.data.length);\r\n\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    console.log(\"data 확인 from saga : \", data);\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction deleteCommentAPI(data) {\r\n    console.log(\"data 확인 from saga : \", data);\r\n    return axios.delete(`post/comment/${data.PostId}/${data.CommentId}`);\r\n}\r\n\r\nfunction* deleteComment(action) {\r\n    try {\r\n        const result = yield call(deleteCommentAPI, action.data);\r\n        console.log(\"삭제에 대한 응답 : \", result.data);\r\n\r\n        yield put({\r\n            type: DELETE_COMMENT_SUCCESS,\r\n            // 라우터에서 댓글 삭제한뒤 PostId와 CommentId 리턴 \r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: DELETE_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchDeleteComment() {\r\n    yield takeLatest(DELETE_COMMENT_REQUEST, deleteComment);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchSearchPosts() {\r\n    yield takeLatest(SEARCH_POSTS_REQUEST, searchPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchUpdatePost() {\r\n    yield throttle(5000, UPDATE_POST_REQUEST, updatePost)\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPosts),\r\n        fork(watchUploadImages),\r\n        fork(watchDeleteComment),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n        fork(watchSearchPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork (watchUpdatePost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}