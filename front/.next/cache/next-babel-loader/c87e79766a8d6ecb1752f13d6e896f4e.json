{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport produce from 'immer';\nimport shortId from 'shortid';\nimport faker from 'faker';\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n});\n\nexport const initialState = {\n  mainPosts: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  hasMorePosts: true,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  imagePaths: []\n}; // 게시글 생성(using faker) 함수 \n\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Commeents: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n})); // 최초 게시글 10개 설정\n\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; // 댓글 추가\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport default ((state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = false;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentError: action.error\n        });\n\n      case REMOVE_POST_REQUEST:\n        // return {\n        //     ...state,\n        //     removePostLoading: true,\n        //     removePostDone: false,\n        //     removePostError: null,\n        // };\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        // return {\n        //     ...state,\n        //     mainPosts: state.mainPosts.filter((v) => {\n        //         console.log(\"삭제할 id : \", action.data);\n        //         return v.id !== action.data\n        //     }),\n        //     removePostLoading: false,\n        //     removePostDone: true,\n        // };\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n\n      case REMOVE_POST_FAILURE:\n        // return {\n        //     ...state,\n        //     removePostLoading: false,\n        //     removePostError: action.error,\n        // };\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      default:\n        return state;\n    }\n  });\n}); // export default reducer;","map":{"version":3,"sources":["C:/prepare/front/reducers/post.js"],"names":["produce","shortId","faker","dummyPost","data","id","content","User","nickname","Images","Comments","dummyComment","generate","initialState","mainPosts","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","loadPostsLoading","loadPostsDone","loadPostsError","hasMorePosts","uploadImagesLoading","uploadImagesDone","uploadImagesError","imagePaths","generateDummyPost","number","Array","fill","map","name","findName","lorem","paragraph","src","image","Commeents","sentence","concat","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","state","action","draft","type","unshift","error","post","find","v","postId","filter","length"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\nimport shortId from 'shortid';\r\nimport faker from 'faker';\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n    },\r\n});\r\n\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    hasMorePosts: true,\r\n\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    imagePaths: [],\r\n\r\n};\r\n\r\n// 게시글 생성(using faker) 함수 \r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n    id: shortId.generate(),\r\n    User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Commeents: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\n// 최초 게시글 10개 설정\r\ninitialState.mainPosts = initialState.mainPosts.concat(\r\n    generateDummyPost(10)\r\n)\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n// 댓글 추가\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport default (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n\r\n            case ADD_COMMENT_FAILURE:\r\n                return {\r\n                    ...state,\r\n                    addCommentLoading: false,\r\n                    addCommentError: action.error,\r\n                };\r\n            case REMOVE_POST_REQUEST:\r\n                // return {\r\n                //     ...state,\r\n                //     removePostLoading: true,\r\n                //     removePostDone: false,\r\n                //     removePostError: null,\r\n                // };\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts: state.mainPosts.filter((v) => {\r\n                //         console.log(\"삭제할 id : \", action.data);\r\n                //         return v.id !== action.data\r\n                //     }),\r\n                //     removePostLoading: false,\r\n                //     removePostDone: true,\r\n                // };\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n\r\n            case REMOVE_POST_FAILURE:\r\n                // return {\r\n                //     ...state,\r\n                //     removePostLoading: false,\r\n                //     removePostError: action.error,\r\n                // };\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n\r\n            case LOAD_POSTS_REQUEST:\r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                draft.hasMorePosts = draft.mainPosts.length < 50;\r\n                break;\r\n            case LOAD_POSTS_FAILURE:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;\r\n\r\n            default:\r\n                return state;\r\n        }\r\n    });\r\n\r\n}\r\n\r\n// export default reducer;\r\n"]},"metadata":{},"sourceType":"module"}