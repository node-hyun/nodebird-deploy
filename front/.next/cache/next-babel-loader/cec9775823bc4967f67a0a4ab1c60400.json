{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport produce from 'immer';\nimport shortId from 'shortid';\nimport faker from 'faker';\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    }\n  };\n};\n\nexport var initialState = {\n  mainPosts: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  deleteCommentLoading: false,\n  deleteCommentDone: false,\n  deleteCommentError: null,\n  imagePaths: [],\n  hasMorePosts: true\n};\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE'; // 댓글 추가\n\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var DELETE_COMMENT_REQUEST = 'DELETE_COMMENT_REQUEST';\nexport var DELETE_COMMENT_SUCCESS = 'DELETE_COMMENT_SUCCESS';\nexport var DELETE_COMMENT_FAILURE = 'DELETE_COMMENT_FAILURE';\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.imagePaths = []; // draft.mainPosts.unshift(dummyPost(action.data));\n\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = false;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.PostId;\n        });\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentError: action.error\n        });\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        // draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          // draft.imagePaths = draft.action.data;\n          draft.imagePaths.unshift(action.data);\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n\n      case DELETE_COMMENT_REQUEST:\n        draft.deleteCommentLoading = false;\n        draft.deleteCommentDone = false;\n        draft.deleteCommentError = null;\n        break;\n\n      case DELETE_COMMENT_SUCCESS:\n        draft.deleteCommentLoading = false;\n        draft.deelteCommentDone = true; // console.log(\"original_post_of_comment : \", original_post_of_comment);\n\n        var commentsForDelete = draft.mainPosts.find(function (v) {\n          return v.id === action.data.PostId;\n        }).Comments;\n        draft.commentsForDelete = commentsForDelete.filter(function (v) {\n          return v.id != action.data.CommentId;\n        });\n        break;\n\n      case DELETE_COMMENT_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          deleteCommentLoading: false,\n          deleteCommentError: action.error\n        });\n\n      default:\n        return state;\n    }\n  });\n}); // export default reducer;","map":{"version":3,"sources":["C:/prepare/front/reducers/post.js"],"names":["produce","shortId","faker","dummyComment","data","id","generate","content","User","nickname","initialState","mainPosts","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","loadPostsLoading","loadPostsDone","loadPostsError","uploadImagesLoading","uploadImagesDone","uploadImagesError","deleteCommentLoading","deleteCommentDone","deleteCommentError","imagePaths","hasMorePosts","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","state","action","draft","type","unshift","error","post","find","v","PostId","Comments","filter","concat","length","i","deelteCommentDone","commentsForDelete","CommentId"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\nimport shortId from 'shortid';\r\nimport faker from 'faker';\r\n\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n    },\r\n});\r\n\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    \r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n\r\n    deleteCommentLoading: false,\r\n    deleteCommentDone: false,\r\n    deleteCommentError: null,\r\n\r\n    imagePaths: [],\r\n    hasMorePosts: true,\r\n};\r\n\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n// 댓글 추가\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const DELETE_COMMENT_REQUEST = 'DELETE_COMMENT_REQUEST';\r\nexport const DELETE_COMMENT_SUCCESS = 'DELETE_COMMENT_SUCCESS';\r\nexport const DELETE_COMMENT_FAILURE = 'DELETE_COMMENT_FAILURE';\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.imagePaths = [];\r\n                // draft.mainPosts.unshift(dummyPost(action.data));\r\n                draft.mainPosts.unshift(action.data);\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n\r\n            case ADD_COMMENT_FAILURE:\r\n                return {\r\n                    ...state,\r\n                    addCommentLoading: false,\r\n                    addCommentError: action.error,\r\n                };\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                // draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n\r\n            case LOAD_POSTS_REQUEST:\r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = draft.mainPosts.concat(action.data);\r\n                draft.hasMorePosts = action.data.length === 10;\r\n\r\n                break;\r\n            case LOAD_POSTS_FAILURE:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;\r\n\r\n            case UPLOAD_IMAGES_REQUEST:\r\n                draft.uploadImagesLoading = true;\r\n                draft.uploadImagesDone = false;\r\n                draft.uploadImagesError = null;\r\n                break;\r\n            case UPLOAD_IMAGES_SUCCESS: {\r\n                // draft.imagePaths = draft.action.data;\r\n                draft.imagePaths.unshift(action.data)\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesDone = true;\r\n                break;\r\n            }\r\n            case UPLOAD_IMAGES_FAILURE:\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesError = action.error;\r\n                break;\r\n            case REMOVE_IMAGE:\r\n                draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n                break;\r\n                \r\n            case DELETE_COMMENT_REQUEST:\r\n                draft.deleteCommentLoading = false;\r\n                draft.deleteCommentDone = false;\r\n                draft.deleteCommentError = null;\r\n                break;\r\n            case DELETE_COMMENT_SUCCESS:\r\n                draft.deleteCommentLoading = false;\r\n                draft.deelteCommentDone = true;\r\n                // console.log(\"original_post_of_comment : \", original_post_of_comment);\r\n                const commentsForDelete = draft.mainPosts.find((v) => v.id === action.data.PostId).Comments;\r\n                draft.commentsForDelete = commentsForDelete.filter((v) => v.id != action.data.CommentId);\r\n                break;\r\n\r\n            case DELETE_COMMENT_FAILURE:\r\n                return {\r\n                    ...state,\r\n                    deleteCommentLoading: false,\r\n                    deleteCommentError: action.error,\r\n                };\r\n\r\n            default:\r\n                return state;\r\n        }\r\n    });\r\n\r\n}\r\n\r\n// export default reducer;\r\n"]},"metadata":{},"sourceType":"module"}