{"ast":null,"code":"import React, { useEffect, useCallback } from \"react\";\nimport AppLayout from \"../../../components/AppLayout\";\nimport Head from \"next/head\";\nimport PostForm from \"../../../components/PostForm\";\nimport PostCard from \"../../../components/PostCard\";\nimport { SEARCH_POSTS_REQUEST } from '../../../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../../../reducers/user';\nimport { useSelector, useDispatch } from 'react-redux';\nimport wrapper from '../../../store/configureStore';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport { Button } from \"antd\";\nimport { useRouter } from 'next/router';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst SearchPost = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    searchPostsDone,\n    searchPostsLoading,\n    hasMorePosts\n  } = useSelector(state => state.post);\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const {\n    search_word\n  } = router.query;\n  console.log(\"search_word : \" + search_word);\n  console.log(\"search_word : \" + searchPostsDone);\n  useEffect(() => {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !searchPostsLoading) {\n          var _mainPosts;\n\n          console.log(\"화면이 바닥에 도달 + 포스팅 추가!!\");\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: SEARCH_POSTS_REQUEST,\n            data: {\n              search_word: search_word,\n              lastId: lastId // 그냥 lastId만 써도 된다.\n\n            }\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, searchPostsLoading]);\n  return /*#__PURE__*/_jsxs(AppLayout, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"Home\"\n      })\n    }), /*#__PURE__*/_jsxs(\"h4\", {\n      children: [\"search world : \", search_word]\n    }), mainPosts.map(c => {\n      return /*#__PURE__*/_jsx(PostCard, {\n        post: c\n      }, c.id);\n    })]\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(context.req.headers);\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  console.log(\"context.params.search_word : \", context.params.search_word);\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: SEARCH_POSTS_REQUEST,\n    data: {\n      search_word: context.params.search_word\n    }\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default SearchPost;","map":null,"metadata":{},"sourceType":"module"}