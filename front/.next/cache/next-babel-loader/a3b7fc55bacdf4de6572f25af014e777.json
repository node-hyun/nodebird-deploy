{"ast":null,"code":"import { all, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    console.log(\"saga action.data : \", action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data.text // 입력폼에 입력한 데이터가 여기까지 넘어옴\n\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  console.log(\"addComent action : \", action.data);\n\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    console.log(\"saga comment action.data : \", action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.log(\"댓글 에러 : \", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","throttle","shortId","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","addPostAPI","data","axios","post","addPost","action","id","generate","console","log","type","content","text","err","error","response","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,QAA5C,QAA4D,oBAA5D;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SACIC,gBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,EAIIC,mBAJJ,EAKIC,mBALJ,EAMIC,mBANJ,QAOO,kBAPP;AAQA,SAASC,cAAT,QAA+B,kBAA/B;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOC,KAAK,CAACC,IAAN,CAAW,WAAX,EAAwBF,IAAxB,CAAP;AACH;;AACD,UAAUG,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMmB,EAAE,GAAGd,OAAO,CAACe,QAAR,EAAX;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCJ,MAAM,CAACJ,IAA1C;AACA,UAAMZ,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEf,gBADA;AAENM,MAAAA,IAAI,EAAE;AACFK,QAAAA,EADE;AAEFK,QAAAA,OAAO,EAAEN,MAAM,CAACJ,IAAP,CAAYW,IAFnB,CAEyB;;AAFzB;AAFA,KAAD,CAAT;AAOA,UAAMvB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEX,cADA;AAENE,MAAAA,IAAI,EAAEK;AAFA,KAAD,CAAT;AAIH,GAhBD,CAgBE,OAAOO,GAAP,EAAY;AACVL,IAAAA,OAAO,CAACM,KAAR,CAAcD,GAAd;AACA,UAAMxB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEjB,gBADA;AAENQ,MAAAA,IAAI,EAAEY,GAAG,CAACE,QAAJ,CAAad;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASe,aAAT,CAAuBf,IAAvB,EAA6B;AACzB,SAAOC,KAAK,CAACC,IAAN,CAAY,aAAYF,IAAI,CAACgB,MAAO,UAApC,EAA+ChB,IAA/C,CAAP;AACH;;AACD,UAAUiB,UAAV,CAAqBb,MAArB,EAA6B;AACzBG,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCJ,MAAM,CAACJ,IAA1C;;AACA,MAAI;AACA;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CJ,MAAM,CAACJ,IAAlD;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEb,mBADA;AAENI,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GARD,CAQE,OAAOY,GAAP,EAAY;AACVL,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBI,GAAxB;AACA,UAAMxB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEZ,mBADA;AAENG,MAAAA,IAAI,EAAEY,GAAG,CAACE,QAAJ,CAAad;AAFb,KAAD,CAAT;AAIH;AACJ;;AAGD,UAAUkB,YAAV,GAAyB;AACrB,QAAM7B,UAAU,CAACI,gBAAD,EAAmBU,OAAnB,CAAhB;AACH;;AACD,UAAUgB,eAAV,GAA4B;AACxB,QAAM9B,UAAU,CAACM,mBAAD,EAAsBsB,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMnC,GAAG,CAAC,CACNE,IAAI,CAAC+B,YAAD,CADE,EAEN/B,IAAI,CAACgC,eAAD,CAFE,CAAD,CAAT;AAKH","sourcesContent":["import { all, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\nimport shortId from 'shortid';\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        console.log(\"saga action.data : \", action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data.text, // 입력폼에 입력한 데이터가 여기까지 넘어옴\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\nfunction* addComment(action) {\r\n    console.log(\"addComent action : \", action.data);\r\n    try {\r\n        // const result = yield call(addCommentAPI, action.data);\r\n        console.log(\"saga comment action.data : \", action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(\"댓글 에러 : \", err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}