{"ast":null,"code":"var _jsxFileName = \"C:\\\\prepare\\\\front\\\\components\\\\PostForm.js\";\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport useInput from '../hooks/useInput';\nimport { TweetForm, TweetButton, TweetTextArea } from \"./style/PostFormStyle.js\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button } from \"antd\"; // import { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\n\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PostForm() {\n  const dispatch = useDispatch();\n  const [text, onChangeText, setText] = useInput(\"\");\n  const imageInput = useRef();\n  const {\n    addPostLoading,\n    addPostDone,\n    imagePaths\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  const onSubmit = useCallback(e => {\n    e.preventDefault();\n\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    } // 폼데이터 객체에 이미지와 텍스트 정보를 설정 한뒤 \n\n\n    const formData = new FormData();\n    imagePaths.forEach(p => {\n      formData.append('image', p);\n    });\n    formData.append('content', text); // 액션 data로 설정\n\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onChangeImages = useCallback(e => {\n    console.log('images : ', e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    console.log(\"imageFormData : \", imageFormData);\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  });\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TweetForm, {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TweetTextArea, {\n        rows: 4,\n        value: text,\n        onChange: onChangeText,\n        maxLength: 140,\n        placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"image\",\n        multiple: true,\n        hidden: true,\n        ref: imageInput,\n        onChange: onChangeImages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClickImageUpload,\n        children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        style: {\n          float: 'right'\n        },\n        htmlType: \"submit\",\n        loading: addPostLoading,\n        children: \"Tweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), imagePaths.map((v, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'inline-block'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:3065/${v}`,\n        style: {\n          width: '200px'\n        },\n        alt: v\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: onRemoveImage(i),\n          children: \"\\uC81C\\uAC70\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this)]\n    }, v, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true);\n}\n\nexport default PostForm;","map":{"version":3,"sources":["C:/prepare/front/components/PostForm.js"],"names":["React","useCallback","useEffect","useRef","useInput","TweetForm","TweetButton","TweetTextArea","useDispatch","useSelector","Button","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","dispatch","text","onChangeText","setText","imageInput","addPostLoading","addPostDone","imagePaths","state","post","onSubmit","e","preventDefault","trim","alert","formData","FormData","forEach","p","append","type","data","onClickImageUpload","current","click","onChangeImages","console","log","target","files","imageFormData","call","f","onRemoveImage","index","float","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react'\r\nimport useInput from '../hooks/useInput';\r\nimport { TweetForm, TweetButton, TweetTextArea } from \"./style/PostFormStyle.js\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Button } from \"antd\";\r\n// import { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\n\r\n\r\nfunction PostForm() {\r\n    const dispatch = useDispatch();\r\n    const [text, onChangeText, setText] = useInput(\"\");\r\n    const imageInput = useRef();\r\n    const { addPostLoading, addPostDone, imagePaths } = useSelector((state) => state.post);\r\n\r\n    useEffect(() => {\r\n        if (addPostDone) {\r\n            setText('');\r\n        }\r\n    }, [addPostDone]);\r\n\r\n    const onSubmit = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!text || !text.trim()) {\r\n            return alert('게시글을 작성하세요.');\r\n        }\r\n\r\n        // 폼데이터 객체에 이미지와 텍스트 정보를 설정 한뒤 \r\n        const formData = new FormData();\r\n        imagePaths.forEach((p) => {\r\n            formData.append('image', p);\r\n        });\r\n        formData.append('content', text);\r\n\r\n        // 액션 data로 설정\r\n        return dispatch({\r\n            type: ADD_POST_REQUEST,\r\n            data: formData,\r\n        });\r\n\r\n    }, [text, imagePaths]);\r\n\r\n\r\n    const onClickImageUpload = useCallback(() => {\r\n        imageInput.current.click();\r\n    }, [imageInput.current]);\r\n\r\n    const onChangeImages = useCallback((e) => {\r\n        console.log('images : ', e.target.files);\r\n\r\n        const imageFormData = new FormData();\r\n        [].forEach.call(e.target.files, (f) => {\r\n            imageFormData.append('image', f);\r\n        });\r\n\r\n        console.log(\"imageFormData : \", imageFormData);\r\n\r\n        dispatch({\r\n            type: UPLOAD_IMAGES_REQUEST,\r\n            data: imageFormData,\r\n        });\r\n\r\n    });\r\n\r\n    const onRemoveImage = useCallback((index) => () => {\r\n        dispatch({\r\n            type: REMOVE_IMAGE,\r\n            data: index,\r\n        });\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <TweetForm onSubmit={onSubmit}>\r\n                <TweetTextArea\r\n                    rows={4}\r\n                    value={text}\r\n                    onChange={onChangeText}\r\n                    maxLength={140}\r\n                    placeholder=\"어떤 신기한 일이 있었나요?\"\r\n                />\r\n                <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n                <Button type=\"submit\" style={{ float: 'right' }} htmlType=\"submit\" loading={addPostLoading}>Tweet</Button>\r\n\r\n            </TweetForm>\r\n            {imagePaths.map((v, i) => (\r\n                <div key={v} style={{ display: 'inline-block' }}>\r\n                    <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n                    <div>\r\n                        <Button onClick={onRemoveImage(i)}>제거</Button>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default PostForm\r\n"]},"metadata":{},"sourceType":"module"}