{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport produce from 'immer';\nimport shortId from 'shortid';\nimport faker from 'faker';\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n});\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      userId: 'terecal',\n      nickname: '제로초'\n    },\n    content: 'sample 게시글 #test',\n    Images: [{\n      src: 'https://image.shutterstock.com/image-vector/sample-red-square-grunge-stamp-260nw-338250266.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '첫번째 더미 댓글 fisrt '\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '두번째 더미 댓글 second'\n    }]\n  }],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n}; // initialState.mainPosts = initialState.mainPosts.concat(\n//     Array(20).fill().map(() => ({\n//         id: shortId.generate(),\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//         },\n//         content: faker.lorem.paragraph(),\n//         Images: [{\n//             src: faker.image.image(),\n//         }],\n//         Comments: [{\n//             User: {\n//                 id: shortId.generate(),\n//                 nickname: faker.name.findName(),\n//             },\n//             content: faker.lorem.sentence(),\n//         }],\n//     })),\n// )\n// 게시글 생성(using faker) 함수 \n\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Commeents: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; // 댓글 추가\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport default ((state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        // return {\n        //     ...state,\n        //     addCommentLoading: true,\n        //     addCommentDone: false,\n        //     addCommentError: null,\n        // };\n        draft.addCommentLoading = false;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      // 댓글 추가를 위한 state 갱신 하기\n      // 현재 리턴해야할 state 정보는 다음과 같다. <=> initialState[그외, mainPosts:[{},{},{},{}], 댓글 추가 관련 state 변수]\n      // 이걸 재구성 하려면 mainPosts를 먼저 재구성 하고 그다음 ...mainPosts를 이용해 전체를 재구성한뒤 전체를 재구성하며 된다.\n\n      case ADD_COMMENT_SUCCESS:\n        //     // 갱신할 mainPosts 객체 생성 하기\n        //     const mainPosts = [...state.mainPosts]\n        //     // 본문글 정보를 얻기 위한 index 조회 by action.data.postID\n        //     const postIndex = state.mainPosts.findIndex(\n        //         (v) => v.id === action.data.postId\n        //     );\n        //     // 본문글 정보 가져오기 \n        //     const post = { ...state.mainPosts[postIndex] };\n        //     // 원래 댓글 정보 + 새로운 댓글 정보로 댓글 정보 재구성\n        //     const Comments = [...post.Comments, dummyComment(action.data.content),];\n        //     // mainPosts 재구성\n        //     mainPosts[postIndex] = { ...post, Comments };\n        //     // 전체 리턴값 설정 \n        //     return {\n        //         ...state,\n        //         mainPosts,\n        //         addCommentLoading: false,\n        //         addCommentDone: true,\n        //     };\n        // 본문글 찾기\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentError: action.error\n        });\n\n      case REMOVE_POST_REQUEST:\n        // return {\n        //     ...state,\n        //     removePostLoading: true,\n        //     removePostDone: false,\n        //     removePostError: null,\n        // };\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        // return {\n        //     ...state,\n        //     mainPosts: state.mainPosts.filter((v) => {\n        //         console.log(\"삭제할 id : \", action.data);\n        //         return v.id !== action.data\n        //     }),\n        //     removePostLoading: false,\n        //     removePostDone: true,\n        // };\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n\n      case REMOVE_POST_FAILURE:\n        // return {\n        //     ...state,\n        //     removePostLoading: false,\n        //     removePostError: action.error,\n        // };\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      default:\n        return state;\n    }\n  });\n}); // export default reducer;","map":{"version":3,"sources":["C:/prepare/front/reducers/post.js"],"names":["produce","shortId","faker","dummyPost","data","id","content","User","nickname","Images","Comments","dummyComment","generate","initialState","mainPosts","userId","src","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","name","findName","lorem","paragraph","image","Commeents","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","state","action","draft","type","unshift","error","post","find","v","postId","filter"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\nimport shortId from 'shortid';\r\nimport faker from 'faker';\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n    },\r\n});\r\n\r\n\r\nexport const initialState = {\r\n    mainPosts: [\r\n        {\r\n            id: 1,\r\n            User: {\r\n                id: 1,\r\n                userId: 'terecal',\r\n                nickname: '제로초',\r\n            },\r\n            content: 'sample 게시글 #test',\r\n            Images: [{\r\n                src: 'https://image.shutterstock.com/image-vector/sample-red-square-grunge-stamp-260nw-338250266.jpg',\r\n            }, {\r\n                src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n            }, {\r\n                src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n            }],\r\n            Comments: [{\r\n                User: {\r\n                    nickname: 'nero',\r\n                },\r\n                content: '첫번째 더미 댓글 fisrt ',\r\n            }, {\r\n                User: {\r\n                    nickname: 'hero',\r\n                },\r\n                content: '두번째 더미 댓글 second',\r\n            }]\r\n        }\r\n    ],\r\n    \r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n};\r\n\r\n// initialState.mainPosts = initialState.mainPosts.concat(\r\n//     Array(20).fill().map(() => ({\r\n//         id: shortId.generate(),\r\n//         User: {\r\n//             id: shortId.generate(),\r\n//             nickname: faker.name.findName(),\r\n//         },\r\n//         content: faker.lorem.paragraph(),\r\n//         Images: [{\r\n//             src: faker.image.image(),\r\n//         }],\r\n//         Comments: [{\r\n//             User: {\r\n//                 id: shortId.generate(),\r\n//                 nickname: faker.name.findName(),\r\n//             },\r\n//             content: faker.lorem.sentence(),\r\n//         }],\r\n//     })),\r\n// )\r\n\r\n// 게시글 생성(using faker) 함수 \r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n    id: shortId.generate(),\r\n    User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Commeents: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n// 댓글 추가\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n\r\n            case ADD_COMMENT_REQUEST:\r\n                // return {\r\n                //     ...state,\r\n                //     addCommentLoading: true,\r\n                //     addCommentDone: false,\r\n                //     addCommentError: null,\r\n                // };\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            // 댓글 추가를 위한 state 갱신 하기\r\n            // 현재 리턴해야할 state 정보는 다음과 같다. <=> initialState[그외, mainPosts:[{},{},{},{}], 댓글 추가 관련 state 변수]\r\n            // 이걸 재구성 하려면 mainPosts를 먼저 재구성 하고 그다음 ...mainPosts를 이용해 전체를 재구성한뒤 전체를 재구성하며 된다.\r\n            case ADD_COMMENT_SUCCESS:\r\n                //     // 갱신할 mainPosts 객체 생성 하기\r\n                //     const mainPosts = [...state.mainPosts]\r\n                //     // 본문글 정보를 얻기 위한 index 조회 by action.data.postID\r\n                //     const postIndex = state.mainPosts.findIndex(\r\n                //         (v) => v.id === action.data.postId\r\n                //     );\r\n                //     // 본문글 정보 가져오기 \r\n                //     const post = { ...state.mainPosts[postIndex] };\r\n                //     // 원래 댓글 정보 + 새로운 댓글 정보로 댓글 정보 재구성\r\n                //     const Comments = [...post.Comments, dummyComment(action.data.content),];\r\n                //     // mainPosts 재구성\r\n                //     mainPosts[postIndex] = { ...post, Comments };\r\n                //     // 전체 리턴값 설정 \r\n                //     return {\r\n                //         ...state,\r\n                //         mainPosts,\r\n                //         addCommentLoading: false,\r\n                //         addCommentDone: true,\r\n                //     };\r\n\r\n                // 본문글 찾기\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n\r\n            case ADD_COMMENT_FAILURE:\r\n                return {\r\n                    ...state,\r\n                    addCommentLoading: false,\r\n                    addCommentError: action.error,\r\n                };\r\n            case REMOVE_POST_REQUEST:\r\n                // return {\r\n                //     ...state,\r\n                //     removePostLoading: true,\r\n                //     removePostDone: false,\r\n                //     removePostError: null,\r\n                // };\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts: state.mainPosts.filter((v) => {\r\n                //         console.log(\"삭제할 id : \", action.data);\r\n                //         return v.id !== action.data\r\n                //     }),\r\n                //     removePostLoading: false,\r\n                //     removePostDone: true,\r\n                // };\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n\r\n            case REMOVE_POST_FAILURE:\r\n                // return {\r\n                //     ...state,\r\n                //     removePostLoading: false,\r\n                //     removePostError: action.error,\r\n                // };\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n            default:\r\n                return state;\r\n        }\r\n    });\r\n\r\n}\r\n\r\n// export default reducer;\r\n"]},"metadata":{},"sourceType":"module"}